{% extends 'base.html.twig' %}

{% block titrePage %}Bienvenue sur e-educmaster.com{% endblock %}
{% block sousTitrePage %}E‐former les formateurs{% endblock %}

{% block vueAdmin %}
    {% if app.user.hasRole('ROLE_SUPER_ADMIN') %}
        <li><a href="{{ path('oneCours', {id: cours.id, mode: 'etu'}) }}">Vue étudiant</a></li>
    {% endif %}
{% endblock %}

{% block pageHeader %}
    <!--<div class="page-header">
        <div class="container">
            <h1>Détail des cours</h1>
            <ul class="breadcrumb">
                <li><a href="{{ path('homepage') }}">Accueil</a></li>
                <li class="active">Détail des cours</li>
            </ul>
        </div>
    </div>-->
{% endblock %}

{% block main %}
    <script src="{{ asset('vendors/jquery-ui/jquery-ui.min.js') }}" type=text/javascript></script>
    <script src="{{ asset('educomp/ckeditor/ckeditor.js') }}"></script>
    <script src="{{ asset('educomp/ckeditor/adapters/jquery.js') }}"></script>
    <script>

        jQuery(document).ready(function () {
            var config = {
                configname:"lightConfig",
                toolbar:
                        [
                            { name: 'basicstyles', items : [ 'Bold','Italic','Underline','Strike','Subscript','Superscript' ] },
                            { name: 'paragraph',   items : [ 'NumberedList','BulletedList','-','JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'] },
                            '/',
                            { name: 'styles',      items : [ 'Font','FontSize' ] },
                            { name: 'colors',      items : [ 'TextColor','BGColor' ] },
                            { name: 'switch',      items : [ 'Switch' ] }
                        ],
                height: 100,
                allowedContent: true
            };
            var config2 = {
                configname:"hugeConfig",
                toolbar:
                        [
                            { name: 'document',    items : [ 'Preview','-','Templates' ] },
                            { name: 'clipboard',   items : [ 'Cut','Copy','Paste','PasteText','PasteFromWord','-','Undo','Redo' ] },
                            { name: 'editing',     items : [ 'Find','Replace','-','SelectAll','-','SpellChecker' ] },
                            '/',
                            { name: 'basicstyles', items : [ 'Bold','Italic','Underline','Strike','Subscript','Superscript','-','RemoveFormat' ] },
                            { name: 'paragraph',   items : [ 'NumberedList','BulletedList','-','Outdent','Indent','-','Blockquote','-','JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'] },
                            { name: 'links',       items : [ 'Link','Unlink' ] },
                            { name: 'insert',      items : [ 'Image','Flash','Table','HorizontalRule','Smiley','SpecialChar' ] },
                            '/',
                            { name: 'styles',      items : [ 'Format','Font','FontSize' ] },
                            { name: 'colors',      items : [ 'TextColor','BGColor' ] },
                            { name: 'tools',       items : [ 'Maximize', 'ShowBlocks' ] },
                            { name: 'switch',      items : [ 'Switch' ] }
                        ],
                height: 200,
                allowedContent: true
            };

            $('textarea.simpleEditor').ckeditor(config);
            $('textarea.complexEditor').ckeditor(config2);

            var uncheckedClass = 'fa-square-o';
            var checkedClass = 'fa-check-square-o';

            // click sur le check : affichage ou non de la zoneRessource
            $('.activationBtn').click(function () {
                var id = $(this).closest('.courseElemAdmin').attr('data-idzone');
                var isVisible = $(this).hasClass(checkedClass);
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{path('activateZone_ajax')}}",
                    data: {
                        id: id,
                        isVisible: isVisible
                    },
                    dataType: "json",
                    success: function (response) {
                        updateCheckedState(myBtn, response["isVisible"]);
                    }
                });
            });

            // click sur la suppression de la zoneRessource
            $('.btnDeleteElem').click(function () {
                var id = $(this).closest('.courseElemAdmin').attr('data-idzone');
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{path('deleteZone_ajax')}}",
                    data: {
                        id: id
                    },
                    dataType: "json",
                    success: function (response) {
                        myBtn.closest('.courseElemAdmin').remove();
                    }
                });
            });

            // déplacement des zones
            $('.btnMoveDown').click(function(){
                var elem = $(this).closest('.courseElemAdmin');
                var next = elem.next('.courseElemAdmin');
                elem.insertAfter(next);
                reorderZone($(this).closest('.courseElems'))
            });
            $('.btnMoveUp').click(function(){
                var elem = $(this).closest('.courseElemAdmin');
                var prev = elem.prev('.courseElemAdmin');
                elem.insertBefore(prev);
                reorderZone($(this).closest('.courseElems'))
            });
            function reorderZone(zoneList){
                var arrayZones = [];
                zoneList.find('[data-idzone]').each(function(){
                    arrayZones.push($(this).attr('data-idzone'));
                });

                $.ajax({
                    type: "POST",
                    url: "{{path('sortZone_ajax')}}",
                    data: {
                        arrayZones: arrayZones
                    },
                    dataType: "json",
                    success: function (response) {
                        if(!response["error"]){

                        }else{
                            console.log("Erreur de tri des zones");
                        }
                    }
                });
            }

            /*
             AJOUTS DE ZONES
             */
            //Ajout d'une ressource existante
            $('.addExistingRessource').click(function(){
                $('.modal').attr('data-idSection', $(this).closest('.section').attr('data-idSection')).modal();
            });
            // Ajout de nouvelles ressources
            $('.addNewItem').click(function(){
                var idItem = 0;
                var idSection = $(this).closest('.section').attr('data-idSection');

                var typeItem;
                if($(this).hasClass('addNewTypeDevoir')){
                    typeItem = "devoir";
                }else if($(this).hasClass('addNewTypeLien')){
                    typeItem = "lien";
                }else if($(this).hasClass('addNewTypeLibre')){
                    typeItem = "libre";
                }else if($(this).hasClass('addNewTypeGroupe')){
                    typeItem = "groupe";
                }
                $.ajax({
                    type: "POST",
                    url: "{{path('addZone_ajax')}}",
                    data: {
                        idItem: idItem,
                        idSection: idSection,
                        typeItem: typeItem,
                        idCours: $('[data-coursId]').attr('data-coursId')
                    },
                    dataType: "json",
                    success: function (response) {
                        if(!response["error"]){
                            window.location.href = window.location.href.replace( /[\?#].*|$/, "?idSection="+idSection );
                        }else{
                            console.log("Erreur d'ajout de l'item "+idItem+" à la section");
                        }
                    }
                });
            });

            // click sur le check : affichage ou non de la section
            $('.activationSectionBtn').click(function () {
                var id = $(this).closest('.adminSectionRow').attr('data-idsection');
                var isVisible = $(this).hasClass(checkedClass);
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{path('activateSection_ajax')}}",
                    data: {
                        id: id,
                        isVisible: isVisible
                    },
                    dataType: "json",
                    success: function (response) {
                        updateCheckedState(myBtn, response["isVisible"]);
                    }
                });
            });

            // modification du nom d'une section
            $('.nomSectionInput').on('input', function(){
                if(!$(this).hasClass('inEdition')){
                    var sectionInput = $(this);
                    sectionInput.addClass('inEdition');
                    sectionInput.after('<div class="myBtn btnSaveInputChange btnAdmin btnMiddle col-sm-1 col-xs-1"><i class="fa fa-floppy-o"></i></div>')
                    sectionInput.next('.btnSaveInputChange').click(function(){
                        var id = sectionInput.closest('.adminSectionRow').attr('data-idsection');
                        var nom = sectionInput.val();
                        $.ajax({
                            type: 'POST',
                            url: "{{path('changeNameSection_ajax')}}",
                            async: false,
                            dataType: "json",
                            data: {
                                id: id,
                                nom: nom
                            },
                            success: function (data) {
                                sectionInput.removeClass('inEdition');
                                sectionInput.next('.btnSaveInputChange').remove();
                                $('.ongletSection[data-idsection='+id+'] .nomSection').text(nom);
                            }
                        });
                    });
                }
            });

            //Ajout d'une section
            $('.nomSectionAddInput').on('input', function(){
                var sectionInput = $(this);
                if(!$(this).next('.btnAddSection').hasClass('actif') && $(this).val() != ""){
                    sectionInput.addClass('inEdition');
                    sectionInput.next('.btnAddSection').addClass('actif').click(function(){
                        $.ajax({
                            type: 'POST',
                            url: "{{path('addSection_ajax')}}",
                            async: false,
                            dataType: "json",
                            data: {
                                coursId: $('[data-coursId]').attr('data-coursId'),
                                nom: sectionInput.val()
                            },
                            success: function (data) {
                                window.location.href = window.location.href.replace( /[\?#].*|$/, "?sectionAdmin" );
                            }
                        });
                    });
                }else if($(this).val() == ""){
                    sectionInput.removeClass('inEdition');
                    $('.btnAddSection').removeClass('actif').unbind('click');
                }
            });

            // click sur la suppression de la section
            $('.btnDeleteSection').click(function () {
                var id = $(this).closest('.adminSectionRow').attr('data-idsection');
                $.ajax({
                    type: "POST",
                    url: "{{path('deleteSection_ajax')}}",
                    data: {
                        id: id
                    },
                    dataType: "json",
                    success: function (response) {
                        if(!response["error"]){
                            window.location.href = window.location.href.replace( /[\?#].*|$/, "?sectionAdmin" );
                        }else{
                            var chaine = "la zone contenue";
                            if(response["nbZone"] > 1){
                                chaine = "les "+response["nbZone"]+" zones contenues";
                            }
                            alert("Vous devez préalablement supprimer "+chaine+" dans cette section");
                        }
                    }
                });
            });

            // activation du sortable des sections
            $('.sortableSections').sortable({
                placeholder: "ui-state-highlight",
                handle: ".btnMove",
                cancel: ".notSortable",
                stop: function( event, ui ) {
                    var arraySections = [];
                    var itemDropped = ui.item;
                    var id = itemDropped.attr('data-idsection');
                    $(this).find('[data-idsection]').each(function(){
                        arraySections.push($(this).attr('data-idsection'));
                    });

                    $.ajax({
                        type: "POST",
                        url: "{{path('sortSection_ajax')}}",
                        data: {
                            arraySections: arraySections
                        },
                        dataType: "json",
                        success: function (response) {
                            if(!response["error"]){
                                //on remet aussi à la bonne place l'onglet de gauche correspondant
                                var onglet = $('.ongletSection[data-idsection='+id+']');
                                var newOngleIndex = itemDropped.index();

                                var nbAdminIndex = $('.ongletAdmin').length;

                                onglet.insertAfter($('.ongletSection:eq('+parseInt(newOngleIndex-2 + nbAdminIndex)+')'));
                            }else{
                                console.log("Erreur de tri des sections");
                            }
                        }
                    });
                }
            });

            // ajout d'un item du cours dans une section (via la modale)
            $('.btnAddItem').click(function(){
                var idItem = $(this).closest('.item').attr('data-idItem');
                var typeItem = $(this).closest('.item').attr('data-typeItem');
                var idSection = $(this).closest('.modal').attr('data-idSection');
                $.ajax({
                    type: "POST",
                    url: "{{path('addZone_ajax')}}",
                    data: {
                        idItem: idItem,
                        idSection: idSection,
                        typeItem: typeItem
                    },
                    dataType: "json",
                    success: function (response) {
                        if(!response["error"]){
                            window.location.href = window.location.href.replace( /[\?#].*|$/, "?idSection="+idSection );
                        }else{
                            console.log("Erreur d'ajout de l'item "+idItem+" à la section");
                        }
                    }
                });
            });

            // GESTION DES RESSOURCES
            // suppression d'un item
            $('.btnSupprElem').click(function(){
                var idItem = $(this).closest('.courseElemAdmin').attr('data-idItem');
                var typeItem = $(this).closest('.courseElemAdmin').attr('data-typeItem');
                var idSection = null;
                if($(this).closest('[data-idSection]')){
                    idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                }
                $.ajax({
                    type: "POST",
                    url: "{{path('supprItem_ajax')}}",
                    data: {
                        idItem: idItem,
                        typeItem: typeItem
                    },
                    dataType: "json",
                    success: function (response) {
                        if(!response["error"]){
                            if(idSection == null){
                                window.location.href = window.location.href.replace( /[\?#].*|$/, "?ressourcesAdmin" );
                            }else{
                                window.location.href = window.location.href.replace( /[\?#].*|$/, "?idSection="+idSection );
                            }
                        }else{
                            console.log("Erreur de suppression de l'item "+idItem);
                        }
                    }
                });
            });

            // modification d'un champ d'une ressource
            $('.champAdmin').on('input', function(){
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
            });
            $('[data-champName=typeLien]').on('change', function(){
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
                // mise à jour de l'icone (prévisualisation) ) chaque changement d'option
                elem.find('.detailIconTypeLien i').remove();
                elem.find('.detailIconTypeLien').append('<i class="fa '+$(this).find("option:selected").attr('data-icon')+'"></i>');
            });
            for (var i in CKEDITOR.instances) {
                CKEDITOR.instances[i].on('change', function() {
                    var idItem = $(this).attr('name');
                    var elem = $('#'+idItem).closest('.courseElemAdmin');
                    detectInput(elem);
                });
            }
            function detectInput(elem){
                if(!elem.hasClass('inEdition')) {
                    elem.addClass('inEdition');
                    elem.find('.btnActionCol .btnDelete:first').before('<div class="myBtn btnSaveInputChange btnAdmin btnLeft"><i class="fa fa-floppy-o"></i></div>');
                    if(elem.attr('data-typeItem') == 'lien'){
                        changeLien(elem);
                    }else if(elem.attr('data-typeItem') == 'groupe'){
                        changeGroupe(elem);
                    }else if(elem.attr('data-typeItem') == 'libre'){
                        changeLibre(elem);
                    }
                }
            }
            function changeLien(lien){
                lien.find('.btnSaveInputChange').click(function(){
                    var id = lien.attr('data-idItem');
                    var nom = lien.find('[data-champName=nom]').val();
                    var url = lien.find('[data-champName=url]').val();
                    var description = CKEDITOR.instances[lien.find('[data-champName=description]').attr('id')].getData();
                    var typeLien = lien.find('[data-champName=typeLien]').val();

                    $.ajax({
                        type: 'POST',
                        url: "{{path('changeContentLien_ajax')}}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            url: url,
                            description: description,
                            typeLien: typeLien
                        },
                        success: function (data) {
                            lien.removeClass('inEdition');
                            lien.find('.btnSaveInputChange').remove();
                        }
                    });
                });
            }
            function changeLibre(lien){
                lien.find('.btnSaveInputChange').click(function(){
                    var id = lien.attr('data-idItem');
                    var description = CKEDITOR.instances[lien.find('[data-champName=description]').attr('id')].getData();

                    $.ajax({
                        type: 'POST',
                        url: "{{path('changeContentLibre_ajax')}}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            description: description
                        },
                        success: function (data) {
                            lien.removeClass('inEdition');
                            lien.find('.btnSaveInputChange').remove();
                        }
                    });
                });
            }
            function changeGroupe(groupe){
                console.log('changeGroupe')
                groupe.find('.btnSaveInputChange').click(function(){
                    var id = groupe.attr('data-idItem');
                    var nom = groupe.find('[data-champName=nom]').val();
                    var description = CKEDITOR.instances[groupe.find('[data-champName=description]').attr('id')].getData();

                    $.ajax({
                        type: 'POST',
                        url: "{{path('changeContentGroupe_ajax')}}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            description: description
                        },
                        success: function (data) {
                            groupe.removeClass('inEdition');
                            groupe.find('.btnSaveInputChange').remove();
                        }
                    });
                });
            }

            $('.sortableLiensInGroupe').sortable({
                placeholder: "ui-state-highlight",
                handle: ".btnMove",
                cancel: ".notSortable",
                stop: function (event, ui) {

                }
            });


            // reset les input text pour éviter le cache
            $('.inputReset').val('');

            // force les select option selected (car pb sur les types de liens ça ne se met pas à jour...)
            $('select').each(function(){
                $(this).val($(this).find("[selected=selected]").attr('value'));
            });

            function updateCheckedState(btn, isVisible){
                if (isVisible) {
                    btn.removeClass(uncheckedClass).addClass(checkedClass);
                } else {
                    btn.removeClass(checkedClass).addClass(uncheckedClass);
                }
            }

            var getUrlParameter = function getUrlParameter(sParam) {
                var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                        sURLVariables = sPageURL.split('&'),
                        sParameterName,
                        i;

                for (i = 0; i < sURLVariables.length; i++) {
                    sParameterName = sURLVariables[i].split('=');

                    if (sParameterName[0] === sParam) {
                        return sParameterName[1] === undefined ? true : sParameterName[1];
                    }
                }
            };
            // on clique sur la section passée en paramètre (si reload de la page)
            if(getUrlParameter("idSection")){
                $('.ongletSection[data-idsection='+getUrlParameter("idSection")+'] a').click();
            }else if(getUrlParameter("sectionAdmin")){
                $('#sectionAdmin a').click();
            }else if(getUrlParameter("ressourcesAdmin")){
                $('#ressourcesAdmin a').click();
            }
        });


    </script>


    <div class="container mt-140" data-coursId="{{ cours.id }}">
        <div class="row">
            <div class="col-sm-3">
                <div class="course-intro">
                    <img src="{{ asset('images/') }}{{ cours.imgFilePath }}" class="img-responsive" alt="">
                </div>
            </div>
            <div class="col-sm-9">
                <div class="course-full">
                    <h2 class="heading">{{ cours.nom }}</h2>

                    <div class="personal">
                        <!--<div>
                            <span>Enseignant</span>
                            <span>M. prof de math <a href="teacher-profile.html"><i class="fa fa fa-user"></i>
                                </a></span>
                        </div>
                        <div>
                        </div>-->
                    </div>
                    <div class="editor">
                        {{ cours.accueil | raw}}
                    </div>
                </div>
            </div>
        </div>

        <div class="clearfix"></div>

        <div class="row mt-40 mb-100">

            <!--- Menu des sections sur la gauche -->
            <div class="col-md-3 col-sm-3 col-xs-12">
                <ul class="nav nav-pills nav-stacked pull-left" role="tablist"
                    style="padding-bottom: 5px;padding-top: 5px">

                    <!--- section fictive : pour l'admin -->
                    <li role="presentation" class="active ongletAdmin" id="sectionAdmin">
                        <a href="#t1body_0" aria-controls="t1body_0" role="tab"
                           data-toggle="tab" aria-expanded="true"><i class="fa fa-cogs fa-fw" aria-hidden="true"> </i>
                            Gestion des sections
                        </a>
                    </li>
                    <li role="presentation" class="ongletAdmin" id="ressourcesAdmin">
                        <a href="#t1body_1" aria-controls="t1body_1" role="tab"
                           data-toggle="tab" aria-expanded="true"><i class="fa fa-cogs fa-fw" aria-hidden="true"> </i>
                            Gestion des ressources
                        </a>
                    </li>

                    <!--- sections -->
                    {% for key,val in zonesSections %}
                        <li role="presentation" class="ongletSection" data-idsection="{{ val.section.id }}">
                            <a href="#t1body{{ val.section.id }}" aria-controls="t1body{{ val.section.id }}" role="tab"
                               data-toggle="tab" aria-expanded="true" >
                                <i class="fa {{ val.section.pictoFilePath }} fa-fw" aria-hidden="true"> </i><span class="nomSection">{{ val.section.nom }}</span>
                            </a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="col-md-9 col-sm-9 col-xs-12">
                <div class="tab-content">

                    <!--- administration des sections (activation, modif nom et suppression) -->
                    <div role="tabpanel" class="tab-pane fade in active sortable" id="t1body_0">
                        <div class="sortableSections">
                            {% for key,val in zonesSections %}
                                <div class="row mb-10 adminSectionRow" data-idSection="{{ val.section.id }}">
                                    <div class="myBtn btnAdmin btnLeft col-sm-1  col-xs-1">
                                        {% if val.section.isVisible %}
                                            <i class="activationSectionBtn fa fa-check-square-o"></i>
                                        {% else %}
                                            <i class="activationSectionBtn fa fa-square-o"></i>
                                        {% endif %}
                                    </div>
                                    <div class="myBtn btnAdmin btnMove btnMoveSection col-sm-1  col-xs-1"><i class="fa fa-arrows-alt "></i></div>
                                    <input data-champName="nom" class="nomSectionInput col-sm-8  col-xs-8" value="{{ val.section.nom }}"/>
                                    <div class="myBtn btnRight btnAdmin btnDelete btnDeleteSection col-sm-1 col-xs-1"><i class="fa fa-trash"></i></div>
                                </div>
                            {% endfor %}
                        </div>
                        <div class="row mb-10 adminSectionRow mt-40 notSortable">
                            <input data-champName="nom" class="inputReset nomSectionAddInput col-sm-6  col-xs-6 col-xs-push-2" placeholder="Ajouter une nouvelle section" />
                            <div class="myBtn btnRight btnAdmin btnAddSection col-sm-1 col-xs-1 col-xs-push-2"><i class="fa fa-plus"></i></div>
                        </div>
                    </div>

                    <!--- administration des ressources (CRUD) -->
                    <div role="tabpanel" class="tab-pane fade" id="t1body_1">
                        <ul class="nav nav-tabs" role="tablist">
                            <li role="presentation" class="active"><a href="#btnListLien" aria-controls="btnListLien" role="tab" data-toggle="tab"><i class="fa fa-external-link  fa-fw"></i> Lien</a></li>
                            <li role="presentation"><a href="#btnListDevoir" aria-controls="btnListDevoir" role="tab" data-toggle="tab"><i class="fa fa-university fa-fw"></i> Devoir</a></li>
                            <li role="presentation"><a href="#btnListGroupe" aria-controls="btnListGroupe" role="tab" data-toggle="tab"><i class="fa fa-cubes fa-fw"></i> Groupe de liens</a></li>
                        </ul>
                        <div class="tab-content">
                            <div role="tabpanel" class="tab-pane fade in active" id="btnListLien">
                                <ul class="list-default courseElems">
                                    {% for key,val in liens %}
                                        {% include "cours/adminLien.html.twig"
                                        with {lien:val, zoneId: '0', inSection: 'false', lienTypes: typeLiens}
                                        %}
                                    {% endfor %}
                                </ul>
                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="btnListDevoir">
                                <ul class="list-default courseElems">
                                    {% for key,val in devoirs %}
                                        {% include "cours/adminDevoir.html.twig"
                                        with {nom:val.nom, description: val.description,
                                        zoneId: '0', itemId: val.id, inSection: 'false'}
                                        %}
                                    {% endfor %}
                                </ul>
                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="btnListGroupe">
                                <ul class="list-default courseElems">
                                    {% for key,val in groupes %}
                                        {% include "cours/adminGroupe.html.twig"
                                        with {nom:val.groupe.nom, description: val.groupe.description,
                                        zoneId: '0', itemId: val.groupe.id, inSection: 'false', liens: val.content}
                                        %}
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                    </div>


                    <!--- administration des Zones des différentes sections (activation et tri)  -->
                    {% for key,val in zonesSections %}
                        <div role="tabpanel" class="section tab-pane fade"
                             id="t1body{{ val.section.id }}" data-idSection="{{ val.section.id }}">
                            <div class="editor">
                                <div class="row">
                                    <select class="selectpicker show-menu-arrow col-xs-6" title="Nouvelle ressource">
                                        <option title="Nouvelle ressource" class="addNewItem addNewTypeDevoir">Devoir</option>
                                        <option title="Nouvelle ressource" class="addNewItem addNewTypeLien">Lien</option>
                                        <option title="Nouvelle ressource" class="addNewItem addNewTypeGroupe">Groupe de liens</option>
                                        <option title="Nouvelle ressource" class="addNewItem addNewTypeLibre">Zone libre</option>
                                        <option data-divider="true"></option>
                                        <option title="Nouvelle ressource" class="addExistingRessource">Ressource existante</option>
                                    </select>
                                </div>
                                <ul class="list-default courseElems">
                                    {% for keyR,valR in val.zones.content %}

                                        {% if val.zones.type[keyR] == "lien" %}
                                            <!--
                                                                LIENS
                                            -->
                                            {% include "cours/adminLien.html.twig"
                                            with {lien:valR, visible: val.zones.containers[keyR].isVisible, zoneId: val.zones.containers[keyR].id,
                                            inSection: 'true', lienTypes: typeLiens}
                                            %}
                                        {% elseif val.zones.type[keyR] == "groupe" %}
                                        <!--
                                                            GROUPES DE LIENS
                                        -->
                                            {% include "cours/adminGroupe.html.twig"
                                            with {nom:val.zones.groupe[keyR].nom, description: val.zones.groupe[keyR].description,
                                            zoneId: val.zones.containers[keyR].id, itemId: val.zones.groupe[keyR].id, inSection: 'true',
                                            liens: val.zones.groupe[keyR].assocLiens, visible: val.zones.containers[keyR].isVisible}
                                            %}
                                        {% elseif val.zones.type[keyR] == "devoir" %}
                                            <!--
                                                                DEVOIRS
                                            -->
                                            {% include "cours/adminDevoir.html.twig"
                                            with {nom:valR.devoir.nom, description: valR.devoir.description, visible: val.zones.containers[keyR].isVisible,
                                            zoneId: val.zones.containers[keyR].id, itemId: valR.devoir.id, inSection: 'true'}
                                            %}

                                        {% elseif val.zones.type[keyR] == "free" %}
                                            <!--
                                                                LIBRE
                                            -->
                                            {% include "cours/adminLibre.html.twig"
                                            with {description: valR.description, visible: val.zones.containers[keyR].isVisible,
                                            zoneId: val.zones.containers[keyR].id, itemId: valR.id, inSection: 'true'}
                                            %}
                                        {% endif %}
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                    {% endfor %}

                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" tabindex="-1" role="dialog" data-idSection="0">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <div class="modal-body" style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">
                            <ul class="nav nav-tabs" role="tablist">
                                <li role="presentation" class="active"><a href="#btnListLienModal" aria-controls="btnListLienModal" role="tab" data-toggle="tab"><i class="fa fa-external-link  fa-fw"></i> Lien</a></li>
                                <li role="presentation"><a href="#btnListDevoirModal" aria-controls="btnListDevoirModal" role="tab" data-toggle="tab"><i class="fa fa-university fa-fw"></i> Devoir</a></li>
                                <li role="presentation"><a href="#btnListGroupeModal" aria-controls="btnListGroupeModal" role="tab" data-toggle="tab"><i class="fa fa-cubes fa-fw"></i> Groupe de liens</a></li>
                            </ul>
                            <div class="tab-content">
                                <div role="tabpanel" class="tab-pane fade in active" id="btnListLienModal">
                                    <table class="tableAddItem">
                                        {% for key,val in liens %}
                                            <tr class="item" data-typeItem="lien" data-idItem="{{ val.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr><td class="nomChamp">Nom</td><td>{{ val.nom }}</td></tr>
                                                        <tr><td class="nomChamp">Url</td><td>{{ val.url }}</td></tr>
                                                        <tr><td class="nomChamp">Description</td><td>{{ val.description | raw }}</td></tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                                <div role="tabpanel" class="tab-pane fade" id="btnListDevoirModal">
                                    <table class="tableAddItem">
                                        {% for key,val in devoirs %}
                                            <tr class="item" data-typeItem="devoir" data-idItem="{{ val.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr><td class="nomChamp">Nom</td><td>{{ val.nom }}</td></tr>
                                                        <tr><td class="nomChamp">Description</td><td>{{ val.description | raw }}</td></tr>
                                                        <tr><td class="nomChamp">Dates</td><td>du {{ val.dateDebut|date('Y-m-d') }} au {{ val.dateFin|date('Y-m-d') }}</td></tr>
                                                        <tr><td class="nomChamp">Durée</td><td>{{ val.duree//3600 }}h</td></tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                                <div role="tabpanel" class="tab-pane fade" id="btnListGroupeModal">
                                    <table class="tableAddItem">
                                        {% for key,val in groupes %}
                                            <tr class="item" data-typeItem="groupe" data-idItem="{{ val.groupe.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr><td class="nomChamp">Nom</td><td>{{ val.groupe.nom }}</td></tr>
                                                        <tr><td class="nomChamp">Description</td><td>{{ val.groupe.description | raw }}</td></tr>
                                                        <tr><td class="nomChamp">Liens présents</td>
                                                            <td>
                                                                <ul>
                                                                    {% for keyR,valR in val.content %}
                                                                        <li>{{ valR.nom }}</li>
                                                                    {% endfor %}
                                                                </ul>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}