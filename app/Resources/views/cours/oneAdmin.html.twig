{% extends 'base.html.twig' %}

{% block title %}
    <title>
        {{ cours.discipline.nom }}
    </title>
{% endblock %}

{% block titrePage %}Bienvenue sur la plateforme de l'AFADEC{% endblock %}
{% block sousTitrePage %}Association pour la Formation A Distance de l'Enseignement Catholique{% endblock %}

{% block vueAdmin %}
    {% if app.user.hasRole('ROLE_SUPER_ADMIN') or ((app.user.statut == 'Responsable' or app.user.statut == 'Formateur') and app.user.confirmedByAdmin) %}
        <li><a href="{{ path('oneCours', {id: cours.id, mode: 'etu'}) }}">Vue étudiant</a></li>
        <li><a href="{{ path('oneCours', {id: cours.id, mode: 'ens'}) }}">Vue enseignant correcteur</a></li>
    {% endif %}
{% endblock %}

{% block pageHeader %}
    {% include "cours/filAriane.html.twig" %}
{% endblock %}

{% block main %}
    <script src="{{ asset('vendors/jquery-ui/jquery-ui.min.js') }}" type=text/javascript></script>
    <script src="{{ asset('vendors/ckeditor/ckeditor.js') }}"></script>
    <script src="{{ asset('vendors/ckeditor/adapters/jquery.js') }}"></script>

    <script type="text/javascript" src="{{ asset('vendors/moment/min/moment.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('vendors/moment/min/moment-with-locales.min.js') }}"></script>
    <script type="text/javascript"
            src="{{ asset('vendors/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js') }}"></script>
    <link rel="stylesheet"
          href="{{ asset('vendors/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css') }}"/>

    <style>
        .btnValidateSharedDocsIntitule{
            height: 27px;
            line-height: 27px;
        }
        .btnDesactivated{
            background: #aaa !important;
            cursor: default;
        }
        .btnDesactivated:hover{
            color: #fff !important;
        }
        .unvalidated{
            color: red;
        }
    </style>

    <script>
        jQuery(document).ready(function () {
            console.log("0")
            var steps = $('[data-uploadSteps]').attr('data-uploadSteps');
            var upload_srcSteps = $('[data-uploadSrcSteps]').attr('data-uploadSrcSteps');
            var folderLocation = $('[data-folderUpload]').attr('data-folderUpload');
            var upload_course = $('[data-courseUpload]').attr('data-courseUpload');

            CKEDITOR.config.entities = false;
            CKEDITOR.config.entities_latin = false;

            var config = {
                configname: "lightConfig",
                toolbar:
                    [
                        {
                            name: 'basicstyles',
                            items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript']
                        },
                        {
                            name: 'paragraph',
                            items: ['NumberedList', 'BulletedList', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock']
                        },
                        '/',
                        {name: 'styles', items: ['Font', 'FontSize']},
                        {name: 'colors', items: ['TextColor', 'BGColor']},
                        {name: 'switch', items: ['Switch']}
                    ],
                height: 100,
                allowedContent: true
            };
            var config2 = {
                configname: "hugeConfig",
                toolbar:
                    [
                        {name: 'document', items: ['Preview', '-', 'Templates']},
                        {
                            name: 'clipboard',
                            items: ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo']
                        },
                        {name: 'editing', items: ['Find', 'Replace', '-', 'SelectAll', '-', 'SpellChecker']},
                        '/',
                        {
                            name: 'basicstyles',
                            items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat']
                        },
                        {
                            name: 'paragraph',
                            items: ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock']
                        },
                        {name: 'links', items: ['Link', 'Unlink']},
                        {name: 'insert', items: ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar']},
                        '/',
                        {name: 'styles', items: ['Format', 'Font', 'FontSize']},
                        {name: 'colors', items: ['TextColor', 'BGColor']},
                        {name: 'tools', items: ['Maximize', 'ShowBlocks']},
                        {name: 'switch', items: ['Switch']}
                    ],
                height: 200,
                allowedContent: true
            };
            console.log("1")

            var uncheckedClass = 'fa-square-o';
            var checkedClass = 'fa-check-square-o';

            // les ckeditors ne sont pas chargés à l'init, sinon la page est bcp trop lourde à charger
            $('.simpleEditor[readonly]').click(function () {
                activateCK($(this), config);
            });
            $('.complexEditor[readonly]').click(function () {
                activateCK($(this), config2);
            });
            $('.simpleEditor.toActivate').each(function () {
                activateCK($(this), config);
            });

            function activateCK(editor, config) {
                editor.attr("readonly", false);
                editor.ckeditor(config);
                for (var i in CKEDITOR.instances) {
                    CKEDITOR.instances[i].on('change', function () {
                        var idItem = $(this).attr('name');
                        var elem = $('#' + idItem).closest('.courseElemAdmin');
                        detectInput(elem);
                    });
                }
            }

            // click sur le check : affichage ou non de la zoneRessource
            $('.activationBtn').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                var id = elem.attr('data-idzone');
                var isVisible = $(this).hasClass(checkedClass);
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{ path('activateZone_ajax') }}",
                    data: {
                        id: id,
                        isVisible: isVisible
                    },
                    dataType: "json",
                    success: function (response) {
                        updateCheckedState(myBtn, response["isVisible"]);
                        elem.attr('data-isVisible', response["isVisible"])
                    }
                });
            });

            // click sur la suppression de la zoneRessource
            $('.btnDeleteElem').click(function () {
                var id = $(this).closest('.courseElemAdmin').attr('data-idzone');
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{ path('deleteZone_ajax') }}",
                    data: {
                        id: id
                    },
                    dataType: "json",
                    success: function (response) {
                        myBtn.closest('.courseElemAdmin').remove();
                    }
                });
            });
            console.log("2")

            // déplacement des zones
            $('.btnMoveDown').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                var next = elem.next('.courseElemAdmin');
                elem.insertAfter(next);
                reorderZone($(this).closest('.courseElems'))
            });
            $('.btnMoveUp').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                var prev = elem.prev('.courseElemAdmin');
                elem.insertBefore(prev);
                reorderZone($(this).closest('.courseElems'))
            });
            $('.btnMoveTotalDown').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                elem.appendTo(elem.closest('.courseElems'));
                reorderZone($(this).closest('.courseElems'))
            });
            $('.btnMoveTotalUp').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                elem.prependTo(elem.parent());
                reorderZone($(this).closest('.courseElems'))
            });

            function reorderZone(zoneList) {
                var arrayZones = [];
                zoneList.find('[data-idzone]').each(function () {
                    arrayZones.push($(this).attr('data-idzone'));
                });

                $.ajax({
                    type: "POST",
                    url: "{{ path('sortZone_ajax') }}",
                    data: {
                        arrayZones: arrayZones
                    },
                    dataType: "json",
                    success: function (response) {
                        if (!response["error"]) {

                        } else {
                            console.log("Erreur de tri des zones");
                        }
                    }
                });
            }
            console.log("3")

            /*
             AJOUTS DE ZONES
             */
            //Ajout d'une ressource existante
            $('.addExistingRessource').click(function () {
                $('.modal').modal();
                $('.modal .modal-body').hide();
                $('.modal .modal-body[data-contentModal=ajoutRessExist]').attr('data-idSection', $(this).closest('.section').attr('data-idSection')).show();
            });


            // Ajout de nouvelles ressources
            $('.addNewItem').click(function() {
                console.log('click2');
                var idItem = 0;
                var idSection = $(this).closest('.section').attr('data-idSection');

                var typeItem;
                if ($(this).hasClass('addNewTypeDevoir')) {
                    typeItem = "devoir";
                } else if ($(this).hasClass('addNewTypeLien')) {
                    typeItem = "lien";
                } else if ($(this).hasClass('addNewTypeLibre')) {
                    typeItem = "libre";
                } else if ($(this).hasClass('addNewTypeGroupe')) {
                    typeItem = "groupe";
                } else if ($(this).hasClass('addNewTypeForum')) {
                    typeItem = "forum";
                } else if ($(this).hasClass('addNewTypeChat')) {
                    typeItem = "chat";
                }
                console.log(typeItem+"2");
           /* });
            $("#ressCreaSelectPicker").on("changed.bs.select", function(e, clickedIndex, newValue, oldValue) {
                console.log('click');
                var selectedD = $(this).find('option').eq(clickedIndex)
                var idItem = 0;
                var idSection = $(this).closest('.section').attr('data-idSection');

                var typeItem;
                if (selectedD.hasClass('addNewTypeDevoir')) {
                    typeItem = "devoir";
                } else if (selectedD.hasClass('addNewTypeLien')) {
                    typeItem = "lien";
                } else if (selectedD.hasClass('addNewTypeLibre')) {
                    typeItem = "libre";
                } else if (selectedD.hasClass('addNewTypeGroupe')) {
                    typeItem = "groupe";
                } else if (selectedD.hasClass('addNewTypeForum')) {
                    typeItem = "forum";
                } else if (selectedD.hasClass('addNewTypeChat')) {
                    typeItem = "chat";
                }
                console.log(typeItem);
*/
                $.ajax({
                    type: "POST",
                    url: "{{ path('addZone_ajax') }}",
                    data: {
                        idItem: idItem,
                        idSection: idSection,
                        typeItem: typeItem,
                        idCours: $('[data-coursId]').attr('data-coursId')
                    },
                    dataType: "json",
                    success: function (response) {
                        if (!response["error"]) {
                            window.location.href = window.location.href.replace(/[\?#].*|$/, "?idSection=" + idSection);
                        } else {
                            console.log("Erreur d'ajout de l'item " + idItem + " à la section");
                        }
                    }
                });
            });
            console.log("4")

            // click sur le check : affichage ou non de la section
            $('.activationSectionBtn').click(function () {
                var id = $(this).closest('.adminSectionRow').attr('data-idsection');
                var isVisible = $(this).hasClass(checkedClass);
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{ path('activateSection_ajax') }}",
                    data: {
                        id: id,
                        isVisible: isVisible
                    },
                    dataType: "json",
                    success: function (response) {
                        updateCheckedState(myBtn, response["isVisible"]);
                        myBtn.closest('.adminSectionRow').removeClass('visibility_');
                        $('.ongletSection[data-idsection=' + id + ']').removeClass('visibility_');
                        if (!response["isVisible"]) {
                            myBtn.closest('.adminSectionRow').addClass('visibility_');
                            $('.ongletSection[data-idsection=' + id + ']').addClass('visibility_');
                        }
                    }
                });
            });

            // modification du nom d'une section
            $('.nomSectionInput').on('input', function () {
                if (!$(this).hasClass('inEdition')) {
                    var sectionInput = $(this);
                    sectionInput.addClass('inEdition');
                    sectionInput.after('<div class="myBtn btnSaveInputChange btnAdmin btnMiddle col-sm-1 col-xs-1"><i class="fa fa-floppy-o"></i></div>')
                    sectionInput.next('.btnSaveInputChange').click(function () {
                        var id = sectionInput.closest('.adminSectionRow').attr('data-idsection');
                        var nom = sectionInput.val();
                        $.ajax({
                            type: 'POST',
                            url: "{{ path('changeNameSection_ajax') }}",
                            async: false,
                            dataType: "json",
                            data: {
                                id: id,
                                nom: nom
                            },
                            success: function (data) {
                                sectionInput.removeClass('inEdition');
                                sectionInput.next('.btnSaveInputChange').remove();
                                $('.ongletSection[data-idsection=' + id + '] .nomSection').text(nom);
                            }
                        });
                    });
                }
            });
            $('.faIconSectionInput').on('input', function () {
                if (!$(this).hasClass('inEdition')) {
                    var sectionInput = $(this);
                    sectionInput.addClass('inEdition');
                    sectionInput.after('<div class="myBtn btnSaveInputChange btnAdmin btnMiddle col-sm-1 col-xs-1"><i class="fa fa-floppy-o"></i></div>')
                    sectionInput.next('.btnSaveInputChange').click(function () {
                        var id = sectionInput.closest('.adminSectionRow').attr('data-idsection');
                        var faIcon = sectionInput.val();
                        $.ajax({
                            type: 'POST',
                            url: "{{ path('changefaIconSection_ajax') }}",
                            async: false,
                            dataType: "json",
                            data: {
                                id: id,
                                faIcon: faIcon
                            },
                            success: function (data) {
                                window.location.href = window.location.href.replace(/[\?#].*|$/, "?sectionAdmin");
                            }
                        });
                    });
                }
            });
            console.log("5")

            //Ajout d'une section
            $('.nomSectionAddInput').on('input', function () {
                var sectionInput = $(this);
                if (!$(this).next('.btnAddSection').hasClass('actif') && $(this).val() != "") {
                    sectionInput.addClass('inEdition');
                    sectionInput.next('.btnAddSection').addClass('actif').click(function () {
                        $.ajax({
                            type: 'POST',
                            url: "{{ path('addSection_ajax') }}",
                            async: false,
                            dataType: "json",
                            data: {
                                coursId: $('[data-coursId]').attr('data-coursId'),
                                nom: sectionInput.val()
                            },
                            success: function (data) {
                                window.location.href = window.location.href.replace(/[\?#].*|$/, "?sectionAdmin");
                            }
                        });
                    });
                } else if ($(this).val() == "") {
                    sectionInput.removeClass('inEdition');
                    $('.btnAddSection').removeClass('actif').unbind('click');
                }
            });

            // click sur la suppression de la section
            $('.btnDeleteSection').click(function () {
                var id = $(this).closest('.adminSectionRow').attr('data-idsection');
                $.ajax({
                    type: "POST",
                    url: "{{ path('deleteSection_ajax') }}",
                    data: {
                        id: id
                    },
                    dataType: "json",
                    success: function (response) {
                        if (!response["error"]) {
                            window.location.href = window.location.href.replace(/[\?#].*|$/, "?sectionAdmin");
                        } else {
                            var chaine = "la zone contenue";
                            if (response["nbZone"] > 1) {
                                chaine = "les " + response["nbZone"] + " zones contenues";
                            }
                            alert("Vous devez préalablement supprimer " + chaine + " dans cette section");
                        }
                    }
                });
            });
            console.log("6")

            // activation du sortable des sections
            $('.sortableSections').sortable({
                placeholder: "ui-state-highlight",
                handle: ".btnMove",
                cancel: ".notSortable",
                stop: function (event, ui) {
                    var arraySections = [];
                    var itemDropped = ui.item;
                    var id = itemDropped.attr('data-idsection');
                    $(this).find('[data-idsection]').each(function () {
                        arraySections.push($(this).attr('data-idsection'));
                    });

                    $.ajax({
                        type: "POST",
                        url: "{{ path('sortSection_ajax') }}",
                        data: {
                            arraySections: arraySections
                        },
                        dataType: "json",
                        success: function (response) {
                            if (!response["error"]) {
                                //on remet aussi à la bonne place l'onglet de gauche correspondant
                                var onglet = $('.ongletSection[data-idsection=' + id + ']');
                                var newOngleIndex = itemDropped.index();

                                var nbAdminIndex = $('.ongletAdmin').length;

                                onglet.insertAfter($('.ongletSection:eq(' + parseInt(newOngleIndex - 2 + nbAdminIndex) + ')'));
                            } else {
                                console.log("Erreur de tri des sections");
                            }
                        }
                    });
                }
            });

            function refreshInSection(idSection) {
                window.location.href = window.location.href.replace(/[\?#].*|$/, "?idSection=" + idSection);
            }

            // ajout d'un item du cours dans une section (via la modale)
            $('.btnAddItem').click(function () {
                var idItem = $(this).closest('.item').attr('data-idItem');
                var typeItem = $(this).closest('.item').attr('data-typeItem');
                var idSection = $(this).closest('.modal-body').attr('data-idSection');
                $.ajax({
                    type: "POST",
                    url: "{{ path('addZone_ajax') }}",
                    data: {
                        idItem: idItem,
                        idSection: idSection,
                        typeItem: typeItem
                    },
                    dataType: "json",
                    success: function (response) {
                        if (!response["error"]) {
                            refreshInSection(idSection);
                        } else {
                            console.log("Erreur d'ajout de l'item " + idItem + " à la section");
                        }
                    }
                });
            });
            console.log("7")

            // GESTION DES RESSOURCES
            // suppression d'un item
            $('.btnSupprElem:not(.btnDeleteSection)').click(function () {
                var idItem = $(this).closest('.courseElemAdmin').attr('data-idItem');
                var typeItem = $(this).closest('.courseElemAdmin').attr('data-typeItem');
                var idSection = null;

                if ($(this).closest('[data-idSection]')) {
                    idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                }

                $('.modal').modal();
                $('.modal .modal-body').hide();
                $('.modal .modal-body[data-contentModal=alertDeleteZoneRess]').show();

                $.ajax({
                    type: "POST",
                    url: "{{ path('getNbZoneRess_ajax') }}",
                    data: {
                        idItem: idItem
                    },
                    dataType: "json",
                    success: function (data) {

                        $('.nbZoneUseOfRess').text(data['nb']);

                        $('.validateRessDeletion').unbind('click').click(function () {
                            $.ajax({
                                type: "POST",
                                url: "{{ path('supprItem_ajax') }}",
                                data: {
                                    idItem: idItem,
                                    typeItem: typeItem
                                },
                                dataType: "json",
                                success: function (response) {
                                    if (!response["error"]) {
                                        if (idSection == null) {
                                            window.location.href = window.location.href.replace(/[\?#].*|$/, "?ressourcesAdmin");
                                        } else {
                                            refreshInSection(idSection);
                                        }
                                    } else {
                                        console.log("Erreur de suppression de l'item " + idItem);
                                    }
                                }
                            });
                        });


                    }
                });


            });

            // modification d'un champ d'une ressource
            $('.champAdmin').on('input', function () {
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
            });
            $('[data-champName=typeLien]').on('change', function () {
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
                // mise à jour de l'icone (prévisualisation) ) chaque changement d'option
                elem.find('.detailIconTypeLien i').remove();
                elem.find('.detailIconTypeLien').append('<i class="fa ' + $(this).find("option:selected").attr('data-icon') + '"></i>');
            });
            $('.addNewResponsable').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
            });
            $('[data-champName=enabled]').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
            });

            /*for (var i in CKEDITOR.instances) {
                CKEDITOR.instances[i].on('change', function() {

                    var idItem = $(this).attr('name');
                    var elem = $('#'+idItem).closest('.courseElemAdmin');
                    detectInput(elem);
                });
            }*/
            console.log("8")

            function detectInput(elem) {
                if (!elem.hasClass('inEdition')) {
                    elem.addClass('inEdition');
                    if(elem.find('.btnActionCol .btnDelete').length){
                        elem.find('.btnActionCol .btnDelete:first').before('<div class="myBtn btnSaveInputChange btnAdmin btnLeft"><i class="fa fa-floppy-o"></i></div>');
                    }else{
                        elem.find('.btnActionCol').append('<div class="myBtn btnSaveInputChange btnAdmin btnLeft"><i class="fa fa-floppy-o"></i></div>');
                    }
                    if (elem.attr('data-typeItem') == 'lien') {
                        changeLien(elem);
                    } else if (elem.attr('data-typeItem') == 'groupe') {
                        changeGroupe(elem);
                    } else if (elem.attr('data-typeItem') == 'libre') {
                        changeLibre(elem);
                    } else if (elem.attr('data-typeItem') == 'devoir') {
                        changeDevoir(elem);
                    } else if (elem.attr('data-typeItem') == 'forum') {
                        changeForum(elem);
                    } else if (elem.attr('data-typeItem') == 'chat') {
                        changeChat(elem);
                    }
                }
            }

            function changeLien(lien) {
                lien.find('.btnSaveInputChange').click(function () {
                    var idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                    var id = lien.attr('data-idItem');
                    var nom = lien.find('[data-champName=nom]').val();
                    var url = lien.find('[data-champName=url]').val();
                    var description = lien.find('textarea[data-champName=description]').val();
                    if (CKEDITOR.instances[lien.find('[data-champName=description]').attr('id')]) {
                        description = CKEDITOR.instances[lien.find('[data-champName=description]').attr('id')].getData();
                    }
                    var typeLien = lien.find('[data-champName=typeLien]').val();

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('changeContentLien_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            url: url,
                            description: description,
                            typeLien: typeLien
                        },
                        success: function (data) {
                            refreshInSection(idSection);
                        }
                    });
                });
            }

            function changeChat(chat) {
                chat.find('.btnSaveInputChange').click(function () {
                    var idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                    var id = chat.attr('data-idItem');
                    var nom = chat.find('[data-champName=nom]').val();
                    var description = chat.find('textarea[data-champName=description]').val();
                    if (CKEDITOR.instances[chat.find('[data-champName=description]').attr('id')]) {
                        description = CKEDITOR.instances[chat.find('[data-champName=description]').attr('id')].getData();
                    }
                    var userResponsables = [];
                    var enabled = chat.find('[data-champName=enabled]').is(':checked');
                    chat.find('.addNewResponsable[aria-selected="true"]').each(function () {
                        userResponsables.push($(this).find('[data-idUser]').attr('data-idUser'));
                    });

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('changeContentChat_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            description: description,
                            userResponsables: userResponsables,
                            enabled: enabled
                        },
                        success: function (data) {
                            refreshInSection(idSection);
                        }
                    });
                });
            }

            function changeForum(forum) {
                forum.find('.btnSaveInputChange').click(function () {
                    var idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                    var id = forum.attr('data-idItem');
                    var nom = forum.find('[data-champName=nom]').val();
                    var description = forum.find('textarea[data-champName=description]').val();
                    if (CKEDITOR.instances[forum.find('[data-champName=description]').attr('id')]) {
                        description = CKEDITOR.instances[forum.find('[data-champName=description]').attr('id')].getData();
                    }

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('changeContentForum_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            description: description
                        },
                        success: function (data) {
                            refreshInSection(idSection);
                        }
                    });
                });
            }

            function changeLibre(lien) {
                lien.find('.btnSaveInputChange').click(function () {
                    var idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                    var id = lien.attr('data-idItem');
                    var description = lien.find('textarea[data-champName=description]').val();
                    if (CKEDITOR.instances[lien.find('[data-champName=description]').attr('id')]) {
                        description = CKEDITOR.instances[lien.find('[data-champName=description]').attr('id')].getData();
                    }

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('changeContentLibre_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            description: description
                        },
                        success: function (data) {
                            refreshInSection(idSection);
                        }
                    });
                });
            }

            function changeGroupe(groupe) {
                groupe.find('.btnSaveInputChange').click(function () {
                    var idSection = $(this).closest('[data-idSection]').attr('data-idSection');
                    var id = groupe.attr('data-idItem');
                    var nom = groupe.find('[data-champName=nom]').val();
                    var isVertical = groupe.find('.btnSetIsVertical i').hasClass(checkedClass);

                    var description = groupe.find('textarea[data-champName=description]').val();
                    if (CKEDITOR.instances[groupe.find('[data-champName=description]').attr('id')]) {
                        description = CKEDITOR.instances[groupe.find('[data-champName=description]').attr('id')].getData();
                    }

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('changeContentGroupe_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            description: description,
                            isVertical: isVertical
                        },
                        success: function (data) {
                            refreshInSection(idSection);
                        }
                    });
                });
            }

            function changeDevoir(devoir) {
                devoir.find('.btnSaveInputChange').click(function () {
                    var id = devoir.attr('data-idItem');
                    var nom = devoir.find('[data-champName=nom]').val();
                    var description = devoir.find('textarea[data-champName=description]').val();
                    var commentaireCopieRendue = devoir.find('textarea[data-champName=commentaireCopieRendue]').val();
                    if (CKEDITOR.instances[devoir.find('[data-champName=description]').attr('id')]) {
                        description = CKEDITOR.instances[devoir.find('[data-champName=description]').attr('id')].getData();
                    }
                    if (CKEDITOR.instances[devoir.find('[data-champName=commentaireCopieRendue]').attr('id')]) {
                        commentaireCopieRendue = CKEDITOR.instances[devoir.find('[data-champName=commentaireCopieRendue]').attr('id')].getData();
                    }
                    var dureeH = devoir.find('[data-champName=dureeHeures] input').val();
                    var dureeM = devoir.find('[data-champName=dureeMinutes] input').val();
                    var bareme = devoir.find('[data-champName=bareme] input').val();
                    var dateDebut = devoir.find('[data-champName=dateDebut] input').val();
                    var dateFin = devoir.find('[data-champName=dateFin] input').val();
                    var mustReload = $(this).hasClass('mustReload');
                    var idSection = $(this).closest('[data-idSection]').attr('data-idSection');

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('changeContentDevoir_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            id: id,
                            nom: nom,
                            description: description,
                            dureeH: dureeH,
                            dureeM: dureeM,
                            bareme: bareme,
                            dateDebut: dateDebut,
                            dateFin: dateFin,
                            commentaireCopieRendue: commentaireCopieRendue
                        },
                        success: function (data) {
                            if (mustReload) {
                                refreshInSection(idSection);
                            } else {
                                devoir.removeClass('inEdition');
                                devoir.find('.btnSaveInputChange').remove();
                            }
                        }
                    });
                });
            }
            console.log("9")

            // Gestion particilière de l'édition des groupes de liens
            // tri de ces liens
            $('.sortableLiensInGroupe').sortable({
                placeholder: "ui-state-highlight",
                handle: ".btnMove",
                cancel: ".notSortable",
                stop: function (event, ui) {
                    var arrayAssocs = [];
                    var itemDropped = ui.item;
                    var id = itemDropped.attr('data-idLien');
                    $(this).find('[data-idLien]').each(function () {
                        arrayAssocs.push($(this).attr('data-idLien'));
                    });

                    $.ajax({
                        type: "POST",
                        url: "{{ path('sortGroupeLiensAssocs_ajax') }}",
                        data: {
                            arrayAssocs: arrayAssocs
                        },
                        dataType: "json",
                        success: function (response) {
                            if (!response["error"]) {

                            } else {
                                console.log("Erreur de tri des sections");
                            }
                        }
                    });
                }
            });
            // on passe les listes en vertical dans un groupe
            $('.btnSetIsVertical').click(function () {
                var groupe = $(this).closest('.courseElemAdmin');
                var btn = $(this).find('i');
                if (btn.hasClass(uncheckedClass)) {
                    btn.removeClass(uncheckedClass).addClass(checkedClass);
                } else {
                    btn.removeClass(checkedClass).addClass(uncheckedClass);
                }
                detectInput(groupe);
            });
            console.log("10")

            // ajout d'un lien dans un groupe
            $('.selectLienToAddToGroupe').click(function () {
                // On commence par sauvegarder le groupe s'il était en cours d'édition
                var groupe = $(this).closest('.courseElemAdmin');
                if (groupe.find('.btnSaveInputChange')) {
                    groupe.find('.btnSaveInputChange').click();
                }

                // puis, on affiche la popup d'ajout d'un lien
                var idSection = $('.ongletSection.active').attr('data-idSection');
                $('.modal').modal();
                $('.modal .modal-body').hide();
                $('.modal .modal-body[data-contentModal=ajoutLienToGroupe]').attr('data-idGroupe', $(this).closest('[data-typeitem=groupe]').attr('data-iditem')).show();

                $('.alertMustBeSet').removeClass('alertMustBeSet');

                $('.btnAddNewLienToGroupe').unbind('click').click(function () {
                    $('.alertMustBeSet').removeClass('alertMustBeSet');
                    var nomLienInGroupe = $(this).closest('.modal-body').find('[data-champName=nomLienInGroupe]').val();
                    var selectedIdCat = $('[data-id=categorieLienInGroupeSelectPicker] [data-idcat]');
                    var categorieLienInGroupe = selectedIdCat.attr('data-idcat');

                    var nomLien = $('[data-contentModal=ajoutLienToGroupe] [data-champName=groupeNewLien_nom]').val();
                    var urlLien = $('[data-contentModal=ajoutLienToGroupe] [data-champName=groupeNewLien_url]').val();
                    var descriptionLien = CKEDITOR.instances['newLienInGroupDescription'].getData();
                    var selectedIdType = $('[data-id=typeLienInGroupeSelectPicker] [data-idType]');
                    var typeLien = selectedIdType.attr('data-idType');

                    if (nomLienInGroupe == "") {
                        $('[data-contentModal=ajoutLienToGroupe] [data-champName=nomLienInGroupe]').addClass('alertMustBeSet');
                    } else if (selectedIdCat.length == 0) {
                        $('[data-contentModal=ajoutLienToGroupe] [data-id=categorieLienInGroupeSelectPicker]').addClass('alertMustBeSet');
                    } else if (selectedIdType.length == 0) {
                        $('[data-contentModal=ajoutLienToGroupe] [data-id=typeLienInGroupeSelectPicker]').addClass('alertMustBeSet');
                    } else {
                        var groupeId = $(this).closest('[data-idGroupe]').attr('data-idGroupe');
                        $.ajax({
                            type: 'POST',
                            url: "{{ path('addLien_ajax') }}",
                            async: false,
                            dataType: "json",
                            data: {
                                typeLien: typeLien,
                                nom: nomLien,
                                description: descriptionLien,
                                url: urlLien,
                                idCours: $('[data-coursId]').attr('data-coursId')
                            },
                            success: function (data) {
                                var lienId = data['id'];
                                $.ajax({
                                    type: 'POST',
                                    url: "{{ path('addLienGroupe_ajax') }}",
                                    async: false,
                                    dataType: "json",
                                    data: {
                                        groupeId: groupeId,
                                        lienId: lienId,
                                        nomLien: nomLienInGroupe,
                                        categorieId: categorieLienInGroupe
                                    },
                                    success: function (data) {
                                        if (urlLien == "") {
                                            uploadLinkFile(lienId, true, idSection);
                                        } else {
                                            refreshInSection(idSection);
                                        }
                                    }
                                });
                            }
                        });
                    }
                });

                $('.btnAddLienToGroupe').unbind('click').click(function () {
                    $('.alertMustBeSet').removeClass('alertMustBeSet');
                    var nomLienInGroupe = $(this).closest('.modal-body').find('[data-champName=nomLienInGroupe]').val();
                    var selectedIdCat = $('[data-id=categorieLienInGroupeSelectPicker] [data-idcat]');
                    var categorieLienInGroupe = selectedIdCat.attr('data-idcat');

                    if (nomLienInGroupe == "") {
                        $('[data-champName=nomLienInGroupe]').addClass('alertMustBeSet');
                    } else if (selectedIdCat.length == 0) {
                        $('[data-id=categorieLienInGroupeSelectPicker]').addClass('alertMustBeSet');
                    } else {
                        var groupeId = $(this).closest('[data-idGroupe]').attr('data-idGroupe');
                        var lienId = $(this).closest('[data-typeitem]').attr('data-iditem');
                        $.ajax({
                            type: 'POST',
                            url: "{{ path('addLienGroupe_ajax') }}",
                            async: false,
                            dataType: "json",
                            data: {
                                groupeId: groupeId,
                                lienId: lienId,
                                nomLien: nomLienInGroupe,
                                categorieId: categorieLienInGroupe
                            },
                            success: function (data) {
                                refreshInSection(idSection);
                            }
                        });
                    }

                });
            });
            // suppression d'un lien d'un groupe
            $('.btnRemoveLienFromGroup').click(function () {
                var lien = $(this).closest('[data-idlien]');
                var idAssoc = lien.attr('data-idlien');
                $.ajax({
                    type: 'POST',
                    url: "{{ path('removeLienGroupe_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        idAssoc: idAssoc
                    },
                    success: function (data) {
                        lien.remove();
                    }
                });
            });
            $('.btnEditLienInGroup').click(function () {
                var lien = $(this).closest('[data-idlien]');
                var idAssoc = lien.attr('data-idlien');
                $('.modal').modal();
                $('.modal .modal-body').hide();
                $('.modal .modal-body[data-contentModal=editLienInGroupe]').show();

                $('.alertMustBeSet').removeClass('alertMustBeSet');

                $.ajax({
                    type: 'POST',
                    url: "{{ path('getLienGroupe_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        idAssoc: idAssoc
                    },
                    success: function (data) {
                        $('[data-contentModal=editLienInGroupe] [data-champName=nomLienInGroupe]').val(data['nomAssoc']);
                        $('[data-contentModal=editLienInGroupe] [data-champName=groupeNewLien_nom]').val(data['nomLien']);
                        $('[data-contentModal=editLienInGroupe] [data-champName=groupeNewLien_url]').val(data['urlLien']);

                        CKEDITOR.instances['editLienInGroupDescription'].setData(data['descrLien']);

                        $('#categorieEditLienInGroupeSelectPicker').selectpicker('val', data['catAssoc']);
                        $('#typeEditLienInGroupeSelectPicker').selectpicker('val', data['typeLien']);
                    }
                });

                $('.btnSaveEditLienInGroupe').unbind('click').click(function () {
                    var selectedIdType = $('[data-id=typeEditLienInGroupeSelectPicker] [data-idType]');
                    var typeLien = selectedIdType.attr('data-idType');
                    var selectedIdCat = $('[data-id=categorieEditLienInGroupeSelectPicker] [data-idcat]');
                    var categorieLienInGroupe = selectedIdCat.attr('data-idcat');

                    var nomAssoc = $('[data-contentModal=editLienInGroupe] [data-champName=nomLienInGroupe]').val();

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('editLienGroupe_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            idAssoc: idAssoc,
                            nomAssoc: nomAssoc,
                            nomLien: $('[data-contentModal=editLienInGroupe] [data-champName=groupeNewLien_nom]').val(),
                            urlLien: $('[data-contentModal=editLienInGroupe] [data-champName=groupeNewLien_url]').val(),
                            descrLien: CKEDITOR.instances['editLienInGroupDescription'].getData(),
                            typeLienId: typeLien,
                            categorieLienId: categorieLienInGroupe

                        },
                        success: function (data) {
                            lien.find('.nomAssoc').text(nomAssoc);
                            $('.modal').modal('toggle');
                        }
                    });
                });
            });
            console.log("11")

            // met à jour les noms de responsables des chats
            $('.chatAdminSelectPicker').each(function () {
                var randomInt = Math.floor((Math.random() * 100000) + 1);
                var idsAdmins = [];
                var idItem = $(this).closest('[data-iditem]').attr('data-iditem');
                var oldidSP = 'MyBtnSelectPicker' + idItem;
                var idSP = oldidSP + '-' + randomInt;
                $(this).find('.MyBtnSelectPicker [data-id=' + oldidSP + ']').attr('data-id', idSP);
                $(this).find('.selectpicker').attr('id', idSP);
                $(this).find('.responsablesIds span').each(function () {
                    idsAdmins.push($(this).text());
                });
                if (idsAdmins.length) {
                    $('#' + idSP).selectpicker('val', idsAdmins);
                }
            });

            // reset les input text pour éviter le cache
            $('.inputReset').val('');

            // force les select option selected (car pb sur les types de liens ça ne se met pas à jour...)
            $('select').each(function () {
                $(this).val($(this).find("[selected=selected]").attr('value'));
            });
            console.log("12")

            function updateCheckedState(btn, isVisible) {
                if (isVisible) {
                    btn.removeClass(uncheckedClass).addClass(checkedClass);
                } else {
                    btn.removeClass(checkedClass).addClass(uncheckedClass);
                }
            }

            var getUrlParameter = function getUrlParameter(sParam) {
                var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                    sURLVariables = sPageURL.split('&'),
                    sParameterName,
                    i;

                for (i = 0; i < sURLVariables.length; i++) {
                    sParameterName = sURLVariables[i].split('=');

                    if (sParameterName[0] === sParam) {
                        return sParameterName[1] === undefined ? true : sParameterName[1];
                    }
                }
            };
            // on clique sur la section passée en paramètre (si reload de la page)
            if (getUrlParameter("idSection")) {
                $('.ongletSection[data-idsection=' + getUrlParameter("idSection") + '] a').click();
            } else if (getUrlParameter("sectionAdmin")) {
                $('#sectionAdmin a').click();
            } else if (getUrlParameter("ressourcesAdmin")) {
                $('#ressourcesAdmin a').click();
            }
            console.log("13")

            // upload d'un fichier pour un lien
            function uploadLinkFile(lienId, refresh, idSection) {
                var coursId = $('[data-coursId]').attr('data-coursId');
                var lienUrlInput = $('[data-typeItem=lien][data-idItem=' + lienId + '] .champAdmin[data-champName=url]');

                $('.modal').modal();
                $('.modal .modal-body').hide();
                $('.modal .modal-body[data-contentModal=uploadFile]').attr('data-idItem', lienId).show();

                // si le folder n'existe pas, on le créé
                var url = steps + folderLocation + coursId + '/lien/' + lienId + '/';

                $.ajax({
                    type: 'POST',
                    url: "{{ path('checkDirForUploadFile_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        url: url
                    },
                    success: function (data) {
                    },
                    error: function (xhr, status, error) {
                    }
                });

                $('.modal .modal-body[data-contentModal=uploadFile] .bginverse').empty().append(
                    '<div>' +
                    '<div class="mb-10" style="text-align: center">' +
                    '<div class="LabelAdmin col-xs-8">Dézipper le fichier (le fichier index.html sera pointé par le lien)</div>' +
                    '<input data-champName="unzipUploaded" class="col-xs-2" value="" type="checkbox" />' +
                    '</div>' +
                    '</div>' +
                    '<div class="fileUploader btn">' +
                    '<span class="btn btn-success fileinput-button"> ' +
                    '<i class="glyphicon glyphicon-plus"></i> ' +
                    '<span>Ajouter un fichier</span> ' +
                    '<input id="itemUpload" type="file" name="files[]" multiple> ' +
                    '</span> ' +
                    '<div id="itemProgress" class="progress col-xs-12"> ' +
                    '   <div class="progress-bar progress-bar-success"></div> ' +
                    '</div> ' +
                    '</div>'
                );


                $('#itemUpload').fileupload({
                    url: steps + upload_srcSteps + upload_course + folderLocation,
                    dropZone: null,
                    dataType: 'json',
                    add: function (e, data) {
                        var uploadErrors = [];
                        if (data.files[0]['size'] > 256000000) {
                            uploadErrors.push('Fichier trop volumineux : ne pas dépasser 256MO');
                        }
                        if (uploadErrors.length > 0) {
                            alert(uploadErrors.join("\n"));
                        } else {
                            data.submit();
                        }
                    },
                    done: function (e, data) {
                        $.each(data.result.files, function (index, file) {
                            var myUrlTab = file.url.split(folderLocation);
                            $.ajax({
                                type: 'POST',
                                url: "{{ path('uploadLien_ajax') }}",
                                async: false,
                                dataType: "json",
                                data: {
                                    itemId: lienId,
                                    type: file.type,
                                    url: steps + folderLocation + myUrlTab[1],
                                    urlDest: url,
                                    unzipIfZip: $('[data-champName=unzipUploaded]').prop('checked'),
                                    currentUrl: window.location.pathname
                                },
                                success: function (data) {
                                    $('.modal').modal('toggle');
                                    lienUrlInput.val(data.newLien);
                                    if (refresh) {
                                        refreshInSection(idSection);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    $('.modal').modal('toggle');
                                }
                            });
                        });

                    },
                    progressall: function (e, data) {
                        var progress = parseInt(data.loaded / data.total * 100, 10);
                        $('#itemProgress').find('.progress-bar').css(
                            'width',
                            progress + '%'
                        );
                    }
                }).prop('disabled', !$.support.fileInput)
                    .parent().addClass($.support.fileInput ? undefined : 'disabled');
            }

            $('.lienAdmin .fileUploader').click(function () {
                uploadLinkFile($(this).attr('data-idItem'), false, null);
            });

            console.log("14")

            // upload d'un fichier pour un sujet de devoir ou pour un corrige type
            $('.selectSujetAddToDevoir, .selectCorrigeTypeAddToDevoir').click(function () {
                var idSection = $(this).closest('.section').attr('data-idSection');
                var devoir = $(this).closest('[data-typeitem=devoir]');
                var devoirId = devoir.attr('data-iditem');
                var coursId = $('[data-coursId]').attr('data-coursId');

                $('.modal').modal();
                $('.modal .modal-body').hide();
                $('.modal .modal-body[data-contentModal=uploadFile]').attr('data-idItem', devoirId).show();

                // si le folder n'existe pas, on le créé
                var typeItem = "sujets";
                var titreDefaut = "Sujet du devoir";
                if ($(this).hasClass("selectCorrigeTypeAddToDevoir")) {
                    typeItem = "corrigeTypes";
                    titreDefaut = "Corrigé type du devoir";
                }
                var rand = Math.floor((Math.random() * 10000) + 1);
                var url = steps + folderLocation + coursId + '/devoir/' + devoirId + '/' + typeItem + '/' + rand + '/';

                $.ajax({
                    type: 'POST',
                    url: "{{ path('checkDirForUploadFile_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        url: url
                    },
                    success: function (data) {
                    },
                    error: function (xhr, status, error) {
                    }
                });

                $('.modal .modal-body[data-contentModal=uploadFile] .bginverse').empty().append(
                    '<div>' +
                    '<div class="mb-10" style="text-align: left">' +
                    '<div>Nom du document</div> ' +
                    '<input id="inputFileName" data-champName="uploadedFileName" class="col-xs-12" value="" type="text" />' +
                    '<div class="alternative">' +
                    '<div>Url</div> ' +
                    '<input id="inputFileURL" data-champName="inputFileURL" class="col-xs-12" value="" type="text" />' +
                    '<div style="text-align: center"><a style="margin: 20px" class="btn btn-primary btn-sm btnValidURLress">Valider une URL</a>OU Déposez un ficher</div>' +
                    '</div>' +
                    '<div class="LabelAdmin col-xs-8">Dézipper le fichier (le fichier index.html sera pointé par le lien)</div>' +
                    '<input data-champName="unzipUploaded" class="col-xs-2" value="" type="checkbox" />' +
                    '</div>' +
                    '</div>' +

                    '<div class="fileUploader btn">' +
                    '<span class="btn btn-success fileinput-button"> ' +
                    '<i class="glyphicon glyphicon-plus"></i> ' +
                    '<span>Ajouter un fichier</span> ' +
                    '<input id="itemUpload" type="file" name="files[]" multiple> ' +
                    '</span> ' +
                    '<div id="itemProgress" class="progress col-xs-12"> ' +
                    '<div class="progress-bar progress-bar-success"></div> ' +
                    '</div> ' +
                    '</div>'
                );


                $('.modal .modal-body[data-contentModal=uploadFile] [data-champName=uploadedFileName]').val(titreDefaut);

                $('.btnValidURLress').click(function () {
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('validURLress_ajax') }}",
                        async: false,
                        dataType: "json",
                        data: {
                            typeItem: typeItem,
                            itemId: devoirId,
                            urlDest: $('.modal .modal-body[data-contentModal=uploadFile] [data-champName=inputFileURL]').val(),
                            nom: $('.modal .modal-body[data-contentModal=uploadFile] [data-champName=uploadedFileName]').val()
                        },
                        success: function (data) {
                            $('.modal').modal('toggle');
                            if (devoir.find('.btnSaveInputChange').length) {
                                devoir.find('.btnSaveInputChange').addClass('mustReload');
                                devoir.find('.btnSaveInputChange').click();
                            } else {
                                refreshInSection(idSection);
                            }
                        },
                        error: function (xhr, status, error) {
                            $('.modal').modal('toggle');
                        }
                    });
                });

                $('#itemUpload').fileupload({
                    url: steps + upload_srcSteps + upload_course + folderLocation,
                    dropZone: null,
                    dataType: 'json',
                    add: function (e, data) {
                        var uploadErrors = [];
                        if (data.files[0]['size'] > 256000000) {
                            uploadErrors.push('Fichier trop volumineux : ne pas dépasser 256MO');
                        }
                        if (uploadErrors.length > 0) {
                            alert(uploadErrors.join("\n"));
                        } else {
                            data.submit();
                        }
                    },
                    done: function (e, data) {
                        $.each(data.result.files, function (index, file) {
                            var myUrlTab = file.url.split(folderLocation);
                            $.ajax({
                                type: 'POST',
                                url: "{{ path('uploadDevoirFile_ajax') }}",
                                async: false,
                                dataType: "json",
                                data: {
                                    type: file.type,
                                    unzipIfZip: $('[data-champName=unzipUploaded]').prop('checked'),
                                    typeItem: typeItem,
                                    itemId: devoirId,
                                    url: steps + folderLocation + myUrlTab[1],
                                    urlDest: url,
                                    currentUrl: window.location.pathname,
                                    nom: $('.modal .modal-body[data-contentModal=uploadFile] [data-champName=uploadedFileName]').val()
                                },
                                success: function (data) {
                                    $('.modal').modal('toggle');
                                    if (devoir.find('.btnSaveInputChange').length) {
                                        devoir.find('.btnSaveInputChange').addClass('mustReload');
                                        devoir.find('.btnSaveInputChange').click();
                                    } else {
                                        refreshInSection(idSection);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    $('.modal').modal('toggle');
                                }
                            });
                        });

                    },
                    progressall: function (e, data) {
                        var progress = parseInt(data.loaded / data.total * 100, 10);
                        $('#itemProgress').find('.progress-bar').css(
                            'width',
                            progress + '%'
                        );
                    }
                }).prop('disabled', !$.support.fileInput)
                    .parent().addClass($.support.fileInput ? undefined : 'disabled');
            });

            // tri des corrigés et des sujets
            $('.sortableDevoirFile').sortable({
                placeholder: "ui-state-highlight",
                handle: ".btnMove",
                cancel: ".notSortable",
                stop: function (event, ui) {
                    var elementCible = "DevoirCorrigeType";
                    if ($(this).hasClass('sortableSujetDevoir')) {
                        elementCible = "DevoirSujet";
                    }
                    var arrayFile = [];
                    var itemDropped = ui.item;
                    var id = itemDropped.attr('data-idFile');
                    $(this).find('[data-idFile]').each(function () {
                        arrayFile.push($(this).attr('data-idFile'));
                    });

                    $.ajax({
                        type: "POST",
                        url: "{{ path('sortDevoirFile_ajax') }}",
                        data: {
                            arrayFile: arrayFile,
                            elementCible: elementCible
                        },
                        dataType: "json",
                        success: function (response) {
                            if (!response["error"]) {

                            } else {
                                console.log("Erreur de tri des sections");
                            }
                        }
                    });
                }
            });
            $('.btnRemoveSujetFromDevoir, .btnRemoveCorrigeTypeFromDevoir').click(function () {
                var devoir = $(this).closest('[data-typeitem=devoir]');

                var typeItem = "sujet";
                if ($(this).hasClass("btnRemoveCorrigeTypeFromDevoir")) {
                    typeItem = "corrigeType";
                }
                var item = $(this).closest('[data-idfile]');
                var idItem = item.attr('data-idfile');

                $.ajax({
                    type: 'POST',
                    url: "{{ path('removeDevoirFile_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        typeItem: typeItem,
                        itemId: idItem
                    },
                    success: function (data) {
                        item.remove();
                    },
                    error: function (xhr, status, error) {
                        console.log("error");
                    }
                });
            });

            // ajout des dateTimePicker pour les dates de début et de fin
            $('.datePickerEvtGroup').each(function () {
                var dateD = $(this).find('.evtDateD');
                var dateF = $(this).find('.evtDateF');
                dateD.datetimepicker({
                    locale: 'fr',
                    date: toJSDate(dateD.attr('data-date'))
                });

                dateF.datetimepicker({
                    locale: 'fr',
                    useCurrent: false,
                    date: toJSDate(dateF.attr('data-date'))
                });
                dateD.on("dp.change", function (e) {
                    dateF.data("DateTimePicker").minDate(e.date);
                    var elem = $(this).closest('.courseElemAdmin');
                    detectInput(elem);
                });
                dateF.on("dp.change", function (e) {
                    dateD.data("DateTimePicker").maxDate(e.date);
                    var elem = $(this).closest('.courseElemAdmin');
                    detectInput(elem);
                });
            });
            console.log("16")

            function toJSDate(phpDateTime) {
                var dateTime = phpDateTime.split(" ");//dateTime[0] = date, dateTime[1] = time

                var date = dateTime[0].split("-");
                var time = dateTime[1].split(":");

                return new Date(date[0], (date[1] - 1), date[2], time[0], time[1], 0, 0);
            }

            // champ durée
            $('.bootstrapNumber').bootstrapNumber();
            $('.devoirAdmin button').click(function () {
                var elem = $(this).closest('.courseElemAdmin');
                detectInput(elem);
            });

            // activation des documents
            $('.activationDocBtn').click(function () {
                var id = $(this).closest('[data-coursId]').attr('data-coursId');
                var isVisible = $(this).hasClass(checkedClass);
                var myBtn = $(this);
                $.ajax({
                    type: "POST",
                    url: "{{ path('changeActivationDocsCours_ajax') }}",
                    data: {
                        id: id,
                        isVisible: isVisible
                    },
                    dataType: "json",
                    success: function (response) {
                        if (isVisible) {
                            myBtn.removeClass(checkedClass).addClass(uncheckedClass);
                            myBtn.closest('[data-activated]').attr('data-activated', "0");
                        } else {
                            myBtn.removeClass(uncheckedClass).addClass(checkedClass);
                            myBtn.closest('[data-activated]').attr('data-activated', "1");
                        }
                    }
                });
            });

            $('#intituleSharedDocs').on('input', function(){
                var input = $(this).val();
                var id = $(this).closest('[data-coursId]').attr('data-coursId');
                if(input === ""){
                    $('.headingSharedDocs').text('Mes documents partagés');
                }else{
                    $('.headingSharedDocs').text(input);
                }
                $('.headingSharedDocs').addClass('unvalidated');
                $('.btnValidateSharedDocsIntitule').removeClass('btnDesactivated').unbind('click').click(function(){
                    $.ajax({
                        type: "POST",
                        url: "{{ path('updateIntituleSharedDocsCours_ajax') }}",
                        data: {
                            id: id,
                            input: input
                        },
                        dataType: "json",
                        success: function (response) {
                            $('.btnValidateSharedDocsIntitule').addClass('btnDesactivated');
                            $('.headingSharedDocs').removeClass('unvalidated');
                        }
                    });
                });

            });
            console.log("17")

        });

    </script>


    <div class="container mt-140" data-coursId="{{ cours.id }}" data-folderUpload="{{ folderUpload }}"
         data-uploadSteps="{{ uploadSteps }}" data-uploadSrcSteps="{{ uploadSrcSteps }}"
         data-courseUpload="{{ uploadCourse }}">
        <div class="row">
            <div class="col-sm-3">
                <div class="course-intro">
                    <img src="{{ asset('images/cours/') }}{{ cours.imageFilename }}" class="img-responsive" alt="">
                </div>
            </div>
            <div class="col-sm-9">
                <div class="course-full">
                    <h2 class="heading">{{ cours.nom }}</h2>

                    <div class="personal">
                        <!--<div>
                            <span>Enseignant</span>
                            <span>M. prof de math <a href="teacher-profile.html"><i class="fa fa fa-user"></i>
                                </a></span>
                        </div>
                        <div>
                        </div>-->
                    </div>
                    <div class="editor">
                        {{ cours.accueil | raw }}
                    </div>
                </div>
            </div>
        </div>

        <div class="clearfix"></div>
        <div class="row mt-40 mb-100">

            <!--- Menu des sections sur la gauche -->
            <div class="col-md-3 col-sm-3 col-xs-12">
                <ul class="nav nav-pills nav-stacked pull-left" role="tablist"
                    style="padding-bottom: 5px;padding-top: 5px">

                    <!--- section fictive : pour l'admin -->
                    <li role="presentation" class="active ongletAdmin" id="sectionAdmin">
                        <a href="#t1body_0" aria-controls="t1body_0" role="tab"
                           data-toggle="tab" aria-expanded="true"><i class="fa fa-cogs fa-fw" aria-hidden="true"> </i>
                            Gestion des sections
                        </a>
                    </li>
                    {% if isReferent or app.user.hasRole('ROLE_SUPER_ADMIN') %}
                        <li role="presentation" class="ongletAdmin stockRessource" id="ressourcesAdmin">
                            <a href="#t1body_1" aria-controls="t1body_1" role="tab"
                               data-toggle="tab" aria-expanded="true"><i class="fa fa-cogs fa-fw"
                                                                         aria-hidden="true"> </i>
                                Stock de ressources
                            </a>
                        </li>
                    {% endif %}

                    <!--- sections -->
                    {% for key,val in zonesSections %}
                        <li role="presentation" class="ongletSection visibility_{{ val.section.isVisible }}"
                            data-idsection="{{ val.section.id }}">
                            <a href="#t1body{{ val.section.id }}" aria-controls="t1body{{ val.section.id }}" role="tab"
                               data-toggle="tab" aria-expanded="true">
                                <i class="fa {{ val.section.faIcon }} fa-fw" aria-hidden="true"> </i><span
                                        class="nomSection">{{ val.section.nom }}</span>
                            </a>
                        </li>
                    {% endfor %}

                    <!-- Documents -->
                    {% if isReferent or app.user.hasRole('ROLE_SUPER_ADMIN') %}
                        <li role="presentation" class="ongletAdmin">
                            <a href="#sectionDocs" aria-controls="sectionDocs" role="tab" data-toggle="tab"
                               aria-expanded="true"><i class="fa fa-pencil fa-fw" aria-hidden="true"> </i>{% if cours.intituleSharedDocs != "" %}
                                {{ cours.intituleSharedDocs }}
                            {% else %}
                                Documents partagés
                                {% endif %}</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
            <div class="col-md-9 col-sm-9 col-xs-12 sectionAdminContent">
                <div class="tab-content">

                    <!--- administration des sections (activation, modif nom et suppression) -->
                    <div role="tabpanel" class="tab-pane fade in active sortable" id="t1body_0">
                        <div class="sortableSections">
                            {% for key,val in zonesSections %}
                                <div class="row mb-10 adminSectionRow visibility_{{ val.section.isVisible }}"
                                     data-idSection="{{ val.section.id }}">
                                    <div class="myBtn btnAdmin btnLeft col-sm-1  col-xs-1">
                                        {% if val.section.isVisible %}
                                            <i class="activationSectionBtn fa fa-check-square-o"></i>
                                        {% else %}
                                            <i class="activationSectionBtn fa fa-square-o"></i>
                                        {% endif %}
                                    </div>
                                    <div class="myBtn btnAdmin btnMove btnMoveSection col-sm-1  col-xs-1"><i
                                                class="fa fa-arrows-alt "></i></div>
                                    <input data-champName="nom" class="nomSectionInput col-sm-6  col-xs-6"
                                           value="{{ val.section.nom }}"/>
                                    <input data-champName="faIcon" class="faIconSectionInput col-sm-2 col-xs-2"
                                           value="{{ val.section.faIcon }}"/>
                                    {% if app.user.hasRole('ROLE_SUPER_ADMIN') or isReferent %}
                                        <div class="myBtn btnRight btnAdmin btnSupprElem btnDeleteSection col-sm-1 col-xs-1">
                                            <i class="fa fa-trash"></i></div>
                                    {% endif %}
                                </div>
                            {% endfor %}
                        </div>
                        <div class="row mb-10 adminSectionRow mt-40 notSortable">
                            <input data-champName="nom"
                                   class="inputReset nomSectionAddInput col-sm-6  col-xs-6 col-xs-push-2"
                                   placeholder="Ajouter une nouvelle section"/>
                            <div class="myBtn btnRight btnAdmin btnAddSection col-sm-1 col-xs-1 col-xs-push-2"><i
                                        class="fa fa-plus"></i></div>
                        </div>
                    </div>

                    <!--- administration des ressources (CRUD) -->
                    <div role="tabpanel" class="tab-pane fade" id="t1body_1">
                        <ul class="nav nav-tabs" role="tablist">
                            <li role="presentation" class="active"><a href="#btnListLien" aria-controls="btnListLien"
                                                                      role="tab" data-toggle="tab"><i
                                            class="fa fa-external-link  fa-fw"></i> Lien</a></li>
                            <li role="presentation"><a href="#btnListDevoir" aria-controls="btnListDevoir" role="tab"
                                                       data-toggle="tab"><i class="fa fa-university fa-fw"></i>
                                    Devoir</a></li>
                            <li role="presentation"><a href="#btnListGroupe" aria-controls="btnListGroupe" role="tab"
                                                       data-toggle="tab"><i class="fa fa-cubes fa-fw"></i> Groupe de
                                    liens</a></li>
                            <li role="presentation"><a href="#btnListForum" aria-controls="btnListForum" role="tab"
                                                       data-toggle="tab"><i class="fa fa-users fa-fw"></i> Forum</a>
                            </li>
                            <li role="presentation"><a href="#btnListChat" aria-controls="btnListChat" role="tab"
                                                       data-toggle="tab"><i class="fa fa-comments-o fa-fw"></i> Chat</a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div role="tabpanel" class="tab-pane fade in active" id="btnListLien">
                                <ul class="list-default courseElems">
                                    {% for key,val in liens %}
                                        {% include "cours/adminLien.html.twig"
                                            with {lien:val, zoneId: '0', inSection: 'false', lienTypes: typeLiens} %}
                                    {% endfor %}
                                </ul>
                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="btnListDevoir">
                                <ul class="list-default courseElems">
                                    {% for key,val in devoirs %}
                                        {% include "cours/adminDevoir.html.twig"
                                            with {devoir:val.content, zoneId: '0', inSection: 'false', sujets: val.sujets, corrigesType: val.corrigesType} %}
                                    {% endfor %}
                                </ul>
                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="btnListGroupe">
                                <ul class="list-default courseElems">
                                    {% for key,val in groupes %}
                                        {% include "cours/adminGroupe.html.twig"
                                            with {isVertical: val.groupe.isVertical, nom:val.groupe.nom, description: val.groupe.description,
                                            zoneId: '0', itemId: val.groupe.id, inSection: 'false', liens: val.content} %}
                                    {% endfor %}
                                </ul>
                            </div>
                            <div role="tabpanel" class="tab-pane fade in" id="btnListForum">
                                <ul class="list-default courseElems">
                                    {% for key,val in forums %}
                                        {% include "cours/adminForum.html.twig"
                                            with {forum:val, zoneId: '0', inSection: 'false'} %}
                                    {% endfor %}
                                </ul>
                            </div>
                            <div role="tabpanel" class="tab-pane fade in" id="btnListChat">
                                <ul class="list-default courseElems">
                                    {% for key,val in chats %}
                                        {% include "cours/adminChat.html.twig"
                                            with {chat:val, zoneId: '0', inSection: 'false'} %}
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div role="tabpanel" class="tab-pane fade" id="sectionDocs">
                        <div class="course-list documentsDisc" data-activated="{{ cours.docsActivated }}"
                             style="margin-top: 0;">
                            <div class="course-media text-center mt-10">
                                <i class="fa fa-file-o fa-3" aria-hidden="true"></i>
                            </div>
                            <div class="course-detail">
                                <h4 class="heading headingSharedDocs">
                                    {% if cours.intituleSharedDocs != "" %}
                                        {{ cours.intituleSharedDocs }}
                                    {% else %}
                                        Mes documents partagés
                                    {% endif %}
                                </h4>
                                <div class="row">
                                    <label for="intituleSharedDocs" class=" col-xs-2">Intitulé</label>
                                    <input  class=" col-xs-9" id="intituleSharedDocs" type="text" value="{{ cours.intituleSharedDocs }}" />
                                    <a class="myBtn btnAlone btnAdmin col-xs-1 btnDesactivated btnValidateSharedDocsIntitule">
                                        <i class="fa fa-check" aria-hidden="true"></i>
                                    </a>
                                </div>
                                <div class="row">
                                    <label class="ml-10"> Activer le partage</label>
                                    <div class="myBtn btnAlone btnAdmin col-xs-1">
                                        {% if cours.docsActivated %}
                                            <i class="activationDocBtn fa fa-check-square-o"></i>
                                        {% else %}
                                            <i class="activationDocBtn fa fa-square-o"></i>
                                        {% endif %}
                                    </div>
                                </div>


                                <div class="resumeDocs mt-20 col-xs-12">
                                    <a href="{{ path('courseDocs', {id: cours.id}) }}" class="btn btn-primary btn-sm">Accéder</a>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--- administration des Zones des différentes sections (activation et tri)  -->
                    {% for key,val in zonesSections %}
                        <div role="tabpanel" class="section tab-pane fade"
                             id="t1body{{ val.section.id }}" data-idSection="{{ val.section.id }}">
                            <div class="editor">
                                <div class="row">
                                    <select id="ressCreaSelectPicker" class="selectpicker col-xs-6" data-style="MyBtnSelectPickeer"
                                            title="Ajouter une ressource">
                                        {% if isReferent or app.user.hasRole('ROLE_SUPER_ADMIN') %}
                                            <option title="Nouvelle ressource" class="addNewItem addNewTypeDevoir">Devoir</option>
                                            <option title="Nouvelle ressource" class="addNewItem addNewTypeLien">Lien</option>
                                            <option title="Nouvelle ressource" class="addNewItem addNewTypeGroupe">Groupe de liens</option>
                                            <option title="Nouvelle ressource" class="addNewItem addNewTypeLibre">Zone libre</option>
                                        {% endif %}
                                        <option title="Nouvelle ressource" class="addNewItem addNewTypeForum">Forum</option>
                                        <option title="Nouvelle ressource" class="addNewItem addNewTypeChat">Chat</option>
                                        {% if isReferent or app.user.hasRole('ROLE_SUPER_ADMIN') %}
                                            <option data-divider="true"></option>
                                            <option title="Nouvelle ressource" class="addExistingRessource">Ressource existante</option>
                                        {% endif %}
                                    </select>
                                </div>
                                <ul class="list-default courseElems">
                                    {% for keyR,valR in val.zones.content %}

                                        {% if val.zones.type[keyR] == "lien" %}
                                            <!--
                                                                LIENS
                                            -->
                                            {% include "cours/adminLien.html.twig"
                                                with {lien:valR, visible: val.zones.containers[keyR].isVisible, zoneId: val.zones.containers[keyR].id,
                                                inSection: 'true', lienTypes: typeLiens} %}
                                        {% elseif val.zones.type[keyR] == "groupe" %}
                                            <!--
                                                                GROUPES DE LIENS
                                            -->
                                            {% include "cours/adminGroupe.html.twig"
                                                with {isVertical: val.zones.groupe[keyR].isVertical, nom:val.zones.groupe[keyR].nom, description: val.zones.groupe[keyR].description,
                                                zoneId: val.zones.containers[keyR].id, itemId: val.zones.groupe[keyR].id, inSection: 'true',
                                                liens: valR, visible: val.zones.containers[keyR].isVisible} %}
                                        {% elseif val.zones.type[keyR] == "devoir" %}
                                            <!--
                                                                DEVOIRS
                                            -->
                                            {% include "cours/adminDevoir.html.twig"
                                                with {devoir:valR, visible: val.zones.containers[keyR].isVisible,
                                                zoneId: val.zones.containers[keyR].id, inSection: 'true', sujets: val.zones.sujet[keyR], corrigesType: val.zones.corrigeType[keyR]} %}

                                        {% elseif val.zones.type[keyR] == "libre" %}
                                            <!--
                                                                LIBRE
                                            -->
                                            {% include "cours/adminLibre.html.twig"
                                                with {description: valR.description, visible: val.zones.containers[keyR].isVisible,
                                                zoneId: val.zones.containers[keyR].id, itemId: valR.id, inSection: 'true'} %}
                                        {% elseif val.zones.type[keyR] == "forum" %}
                                            <!--
                                                                FORUM
                                            -->
                                            {% include "cours/adminForum.html.twig"
                                                with {forum:valR, description: valR.description, visible: val.zones.containers[keyR].isVisible,
                                                zoneId: val.zones.containers[keyR].id, itemId: valR.id, inSection: 'true'} %}
                                        {% elseif val.zones.type[keyR] == "chat" %}
                                            <!--
                                                                CHAT
                                            -->
                                            {% include "cours/adminChat.html.twig"
                                                with {chat:valR, description: valR.description, visible: val.zones.containers[keyR].isVisible,
                                                zoneId: val.zones.containers[keyR].id, itemId: valR.id, inSection: 'true', users: users} %}
                                        {% endif %}
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                    {% endfor %}

                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span>
                </button>


                <!--                  ALERT SUPPRESSION DE RESSOURCE                     -->

                <div class="modal-body" data-contentModal="alertDeleteZoneRess" data-idItem=""
                     style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">
                            <div class="">
                                <div class="alert alert-danger mb-10">
                                    <strong>Attention!</strong> Vous allez supprimer une ressource qui est utilisée dans
                                    <span class="nbZoneUseOfRess"></span> sections !</p>
                                </div>
                                <div class="row mb-10" style="text-align: center">
                                    <div class="btn btn-sm btn-info mb-3 validateRessDeletion">Valider</div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <!--                  UPLOAD DE FICHIER                     -->

                <div class="modal-body" data-contentModal="uploadFile" data-idItem=""
                     style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">


                        </div>
                    </div>
                </div>

                <!--                  EDITION DU LIEN D'UN GROUPE                      -->

                <div class="modal-body" data-contentModal="editLienInGroupe"
                     style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">
                            <table class="tableAddNewLienInGroup">
                                <tr>
                                    <td class="LabelAdmin">Nom du lien dans le groupe</td>
                                    <td><input data-champName="nomLienInGroupe" class="col-xs-8" value=""/></td>
                                </tr>
                                <tr>
                                    <td class="LabelAdmin">Catégorie du lien</td>
                                    <td>
                                        <select id="categorieEditLienInGroupeSelectPicker" class="selectpicker col-xs-8"
                                                data-style="MyBtnSelectPickeer" title="Categorie (couleur) du lien">
                                            {% for key,val in categorieLiens %}
                                                <option value="{{ val.id }}"
                                                        data-content="<span data-idCat='{{ val.id }}' class='couleurLabelOption' style='background-color:{{ val.couleur }};'>{{ val.nom }}</span>">{{ val.nom }}</option>
                                            {% endfor %}
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="LabelAdmin">Nom du lien</td>
                                    <td><input data-champName="groupeNewLien_nom" class="col-xs-8" value=""/></td>
                                </tr>
                                <tr>
                                    <td class="LabelAdmin">Url du lien</td>
                                    <td>
                                        <input data-champName="groupeNewLien_url" class="col-xs-8" value=""/>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="LabelAdmin">Type du lien</td>
                                    <td>
                                        <select id="typeEditLienInGroupeSelectPicker" class="selectpicker col-xs-8"
                                                data-style="MyBtnSelectPickeer" title="Type du lien (icone)">
                                            {% for key,val in typeLiens %}
                                                <option value="{{ val.id }}"
                                                        data-content="<span data-idType='{{ val.id }}' class='typeLabelOption'>{{ val.nom }} <i class='fa {{ val.faIcon }}'></i></span>">{{ val.nom }}</option>
                                            {% endfor %}
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="LabelAdmin">Description du lien</td>
                                    <td><textarea id="editLienInGroupDescription"
                                                  data-champName="groupeNewLien_description"
                                                  class="simpleEditor editor champAdmin toActivate"></textarea></td>
                                </tr>
                            </table>
                            <div class="myBtn inlineBtn btnAdmin btnAlone btnSaveEditLienInGroupe">Enregistrer ce lien
                            </div>
                        </div>
                    </div>
                </div>


                <!--                  AJOUT D'UN LIEN DANS UN GROUPE                      -->

                <div class="modal-body" data-contentModal="ajoutLienToGroupe"
                     style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">
                            <div class="col-xs-12">
                                <div class="row mb-10">
                                    <div class="LabelAdmin col-xs-4">Nom du lien dans le groupe</div>
                                    <input data-champName="nomLienInGroupe" class="col-xs-8" value=""/>
                                </div>
                                <div class="row mb-10">
                                    <div class="LabelAdmin col-xs-4">Catégorie du lien</div>

                                    <select id="categorieLienInGroupeSelectPicker" class="selectpicker col-xs-8"
                                            data-style="MyBtnSelectPickeer" title="Categorie (couleur) du lien">
                                        {% for key,val in categorieLiens %}
                                            <option data-content="<span data-idCat='{{ val.id }}' class='couleurLabelOption' style='background-color:{{ val.couleur }};'>{{ val.nom }}</span>">{{ val.nom }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <hr/>
                            <ul class="nav nav-tabs" role="tablist">
                                <li role="presentation" class="active"><a href="#btnNewLienInGroupeModal"
                                                                          aria-controls="btnNewLienInGroupeModal"
                                                                          role="tab" data-toggle="tab"><i
                                                class="fa fa-external-link  fa-fw"></i> Nouveau Lien</a></li>
                                <li role="presentation"><a href="#btnOldLienInGroupeModal"
                                                           aria-controls="btnOldLienInGroupeModal" role="tab"
                                                           data-toggle="tab"><i class="fa fa-university fa-fw"></i> Lien
                                        existant</a></li>
                            </ul>
                            <div class="tab-content longLinkList">
                                <div role="tabpanel" class="tab-pane fade in active" id="btnNewLienInGroupeModal">
                                    <table class="tableAddNewLienInGroup">
                                        <tr>
                                            <td class="LabelAdmin">Nom du lien</td>
                                            <td><input data-champName="groupeNewLien_nom" class="col-xs-8" value=""/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="LabelAdmin">Url du lien</td>
                                            <td>
                                                <input data-champName="groupeNewLien_url" class="col-xs-8" value=""/>
                                                <div class="col-xs-8 infoLabel">Laissez vide pour uploader ensuite un
                                                    fichier
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="LabelAdmin">Type du lien</td>
                                            <td>
                                                <select id="typeLienInGroupeSelectPicker" class="selectpicker col-xs-8"
                                                        data-style="MyBtnSelectPickeer" title="Type du lien (icone)">
                                                    {% for key,val in typeLiens %}
                                                        <option data-content="<span data-idType='{{ val.id }}' class='typeLabelOption'>{{ val.nom }} <i class='fa {{ val.faIcon }}'></i></span>">{{ val.nom }}</option>
                                                    {% endfor %}
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="LabelAdmin">Description du lien</td>
                                            <td><textarea id="newLienInGroupDescription"
                                                          data-champName="groupeNewLien_description"
                                                          class="simpleEditor editor champAdmin toActivate"></textarea>
                                            </td>
                                        </tr>
                                    </table>
                                    <div class="myBtn inlineBtn btnAdmin btnAlone btnAddNewLienToGroupe">Ajouter ce
                                        nouveau lien
                                    </div>
                                </div>
                                <div role="tabpanel" class="tab-pane fade" id="btnOldLienInGroupeModal">
                                    <table class="tableAddItem">
                                        {% for key,val in liens %}
                                            <tr class="item" data-typeItem="lien" data-idItem="{{ val.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr>
                                                            <td class="nomChamp">Nom</td>
                                                            <td>{{ val.nom }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Url</td>
                                                            <td>{{ val.url }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Description</td>
                                                            <td>{{ val.description | raw }}</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddLienToGroupe"><i
                                                                class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <!--                  AJOUT D'UNERESSOURCE DANS UNE SECTION                      -->

                <div class="modal-body" data-contentModal="ajoutRessExist" data-idSection="0"
                     style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">
                            <ul class="nav nav-tabs" role="tablist">
                                <li role="presentation" class="active"><a href="#btnListLienModal"
                                                                          aria-controls="btnListLienModal" role="tab"
                                                                          data-toggle="tab"><i
                                                class="fa fa-external-link  fa-fw"></i> Lien</a></li>
                                <li role="presentation"><a href="#btnListDevoirModal" aria-controls="btnListDevoirModal"
                                                           role="tab" data-toggle="tab"><i
                                                class="fa fa-university fa-fw"></i> Devoir</a></li>
                                <li role="presentation"><a href="#btnListGroupeModal" aria-controls="btnListGroupeModal"
                                                           role="tab" data-toggle="tab"><i
                                                class="fa fa-cubes fa-fw"></i> Groupe de liens</a></li>
                                <li role="presentation"><a href="#btnListForumModal" aria-controls="btnListForumModal"
                                                           role="tab" data-toggle="tab"><i
                                                class="fa fa-users fa-fw"></i> Forum</a></li>
                                <li role="presentation"><a href="#btnListChatModal" aria-controls="btnListChatModal"
                                                           role="tab" data-toggle="tab"><i
                                                class="fa fa-comments-o fa-fw"></i> Chat</a></li>
                            </ul>
                            <div class="tab-content">
                                <div role="tabpanel" class="tab-pane fade in active" id="btnListLienModal">
                                    <table class="tableAddItem">
                                        {% for key,val in liens %}
                                            <tr class="item" data-typeItem="lien" data-idItem="{{ val.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr>
                                                            <td class="nomChamp">Nom</td>
                                                            <td>{{ val.nom }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Url</td>
                                                            <td>{{ val.url }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Description</td>
                                                            <td>{{ val.description | raw }}</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i
                                                                class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                                <div role="tabpanel" class="tab-pane fade" id="btnListDevoirModal">
                                    <table class="tableAddItem">
                                        {% for key,val in devoirs %}
                                            <tr class="item" data-typeItem="devoir" data-idItem="{{ val.content.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr>
                                                            <td class="nomChamp">Nom</td>
                                                            <td>{{ val.content.nom }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Description</td>
                                                            <td>{{ val.content.description | raw }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Dates</td>
                                                            <td>du {{ val.content.dateDebut|date('Y-m-d') }}
                                                                au {{ val.content.dateFin|date('Y-m-d') }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Durée</td>
                                                            <td>{{ val.content.duree//3600 }}h</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Barême</td>
                                                            <td>{{ val.content.bareme }} points</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Commentaire Copie Rendue</td>
                                                            <td>{{ val.content.commentaireCopieRendue | raw }}</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i
                                                                class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                                <div role="tabpanel" class="tab-pane fade" id="btnListGroupeModal">
                                    <table class="tableAddItem">
                                        {% for key,val in groupes %}
                                            <tr class="item" data-typeItem="groupe" data-idItem="{{ val.groupe.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr>
                                                            <td class="nomChamp">Nom</td>
                                                            <td>{{ val.groupe.nom }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Description</td>
                                                            <td>{{ val.groupe.description | raw }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Liens présents</td>
                                                            <td>
                                                                <ul>
                                                                    {% for keyR,valR in val.content %}
                                                                        <li>{{ valR.nom }}</li>
                                                                    {% endfor %}
                                                                </ul>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i
                                                                class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                                <div role="tabpanel" class="tab-pane fade in" id="btnListForumModal">
                                    <table class="tableAddItem">
                                        {% for key,val in forums %}
                                            <tr class="item" data-typeItem="forum" data-idItem="{{ val.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr>
                                                            <td class="nomChamp">Nom</td>
                                                            <td>{{ val.nom }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Description</td>
                                                            <td>{{ val.description | raw }}</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i
                                                                class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                                <div role="tabpanel" class="tab-pane fade in" id="btnListChatModal">
                                    <table class="tableAddItem">
                                        {% for key,val in chats %}
                                            <tr class="item" data-typeItem="chat" data-idItem="{{ val.id }}">
                                                <td>
                                                    <table class="tableDetailItem">
                                                        <tr>
                                                            <td class="nomChamp">Nom</td>
                                                            <td>{{ val.nom }}</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="nomChamp">Description</td>
                                                            <td>{{ val.description | raw }}</td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td>
                                                    <div class="myBtn btnAdmin btnAlone btnAddItem"><i
                                                                class="fa fa-plus"></i></div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}