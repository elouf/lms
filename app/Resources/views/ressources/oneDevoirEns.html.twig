{% extends 'base.html.twig' %}

{% block vueAdmin %}

{% endblock %}

{% block pageHeader %}
    <div class="page-header">
        <div class="container">
            <h2 class="color3">Copies du devoir {{ devoir.nom }}</h2>
            <ul class="breadcrumb">
                <li class="color3">
                    <a href="{{ path('myCourses') }}" class="label label-info">{{ cours.discipline.nom }}</a>
                    >
                    <a href="{{ path('oneCours', {id: cours.id, mode: 'ens'}) }}" class="label label-info">{{ cours.nom }}</a>

                </li>
            </ul>
        </div>
    </div>
{% endblock %}

{% block main %}
    <script type="text/javascript" src="{{ asset('vendors/tablesorter/dist/js/jquery.tablesorter.min.js') }}"></script>
    <script>
        jQuery(document).ready(function () {
            var steps = $('[data-uploadSteps]').attr('data-uploadSteps');
            var upload_srcSteps = $('[data-uploadSrcSteps]').attr('data-uploadSrcSteps');
            var folderLocation = $('[data-folderUpload]').attr('data-folderUpload');

            var idCours = $('[data-coursId]').attr('data-coursId');
            var idDevoir = $('[data-idDevoir]').attr('data-idDevoir');

            var userId = $('[data-userId]').attr('data-userId');

            var url = steps + folderLocation+idCours+'/devoir/'+idDevoir+'/corriges/';
            var urlCopie = steps + folderLocation+idCours+'/devoir/'+idDevoir+'/copies/';

            /*$('.corrigeUpload').each(function(){
                var etuId = $(this).closest('[data-userId]').attr('data-userId');
                var destUrl = url+etuId+'/';
                $.ajax({
                    type: 'POST',
                    url: "",
                    async: false,
                    dataType: "json",
                    data: {
                        url: destUrl
                    },
                    success: function (data) {
                    },
                    error: function(xhr, status, error) {
                    }
                });
            });*/

            $('.corrigeUpload').fileupload({
                url: steps + upload_srcSteps + folderLocation,
                dropZone:null,
                dataType: 'json',
                add: function(e, data) {
                    var uploadErrors = [];
                    if(data.files[0]['size'] > 5000000) {
                        uploadErrors.push('Fichier trop volumineux : ne pas dépasser 5MO');
                    }
                    if(uploadErrors.length > 0) {
                        alert(uploadErrors.join("\n"));
                    } else {
                        var etuId = $(this).closest('[data-userId]').attr('data-userId');
                        var destUrl = url+etuId+'/';
                        $.ajax({
                            type: 'POST',
                            url: "{{path('checkDirForUploadFile_ajax')}}",
                            async: false,
                            dataType: "json",
                            data: {
                                url: destUrl
                            },
                            success: function (data) {
                            },
                            error: function(xhr, status, error) {
                            }
                        });

                        data.submit();
                    }
                },
                done: function (e, data) {
                    var etuId = $(this).closest('[data-userId]').attr('data-userId');
                    var destUrl = url+etuId+'/';
                    $.each(data.result.files, function (index, file) {
                        var myUrlTab = file.url.split(folderLocation);
                        $.ajax({
                            type: 'POST',
                            url: "{{path('uploadCorrigeFile_ajax')}}",
                            async: false,
                            dataType: "json",
                            data: {
                                idDevoir: idDevoir,
                                userId: userId,
                                url: steps + folderLocation + myUrlTab[1],
                                urlDest: destUrl,
                                currentUrl: window.location.pathname,
                                etuId: etuId
                            },
                            success: function (data) {
                                window.location.href = window.location.href;
                            },
                            error: function(xhr, status, error) {
                            }
                        });
                    });

                },
                progressall: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('.progress-bar').css(
                            'width',
                            progress + '%'
                    );
                }
            }).prop('disabled', !$.support.fileInput)
                    .parent().addClass($.support.fileInput ? undefined : 'disabled');

            // l'admin peut uploader une copie pour l'étudiant
            $('.copieUpload').fileupload({
                url: steps + upload_srcSteps + folderLocation,
                dropZone:null,
                dataType: 'json',
                add: function(e, data) {
                    var uploadErrors = [];
                    if(data.files[0]['size'] > 5000000) {
                        uploadErrors.push('Fichier trop volumineux : ne pas dépasser 5MO');
                    }
                    if(uploadErrors.length > 0) {
                        alert(uploadErrors.join("\n"));
                    } else {
                        var etuId = $(this).closest('[data-userId]').attr('data-userId');
                        var destUrl = urlCopie+etuId+'/';
                        $.ajax({
                            type: 'POST',
                            url: "{{path('checkDirForUploadFile_ajax')}}",
                            async: false,
                            dataType: "json",
                            data: {
                                url: destUrl
                            },
                            success: function (data) {
                            },
                            error: function(xhr, status, error) {
                            }
                        });
                        data.submit();
                    }
                },
                done: function (e, data) {
                    var etuId = $(this).closest('[data-userId]').attr('data-userId');
                    var destUrl = urlCopie+etuId+'/';
                    $.each(data.result.files, function (index, file) {
                        var myUrlTab = file.url.split(folderLocation);
                        $.ajax({
                            type: 'POST',
                            url: "{{path('uploadCopieFile_ajax')}}",
                            async: false,
                            dataType: "json",
                            data: {
                                itemId: idDevoir,
                                userId: etuId,
                                url: steps + folderLocation + myUrlTab[1],
                                urlDest: destUrl,
                                currentUrl: window.location.pathname
                            },
                            success: function (data) {
                                window.location.href = window.location.href;
                            },
                            error: function(xhr, status, error) {
                            }
                        });
                    });

                },
                progressall: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('.progress-bar').css(
                            'width',
                            progress + '%'
                    );
                }
            }).prop('disabled', !$.support.fileInput)
                    .parent().addClass($.support.fileInput ? undefined : 'disabled');


            $('.btnEditNote').click(function(){
                var tr = $(this).closest('tr');
                var span = tr.find('.copieNote');
                var input = tr.find('.copieNoteEdit');
                var btnValidNote = tr.find('.btnValidNote');
                span.addClass('hidden');
                input.removeClass('hidden');
                btnValidNote.removeClass('hidden');
                $(this).addClass('hidden');
            });
            $('.btnValidNote').click(function(){
                var tr = $(this).closest('tr');
                var copieId = tr.attr('data-copieId');
                var span = tr.find('.copieNote');
                var input = tr.find('.copieNoteEdit');
                var btnEditNote = tr.find('.btnEditNote');
                span.removeClass('hidden');
                input.addClass('hidden');
                btnEditNote.removeClass('hidden');
                $(this).addClass('hidden');

                var note = input.val().replace(",", ".");
                $.ajax({
                    type: 'POST',
                    url: "{{ path('editNoteCopie_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        copieId: copieId,
                        note: note
                    },
                    success: function (data) {
                        span.text(note);
                        input.val(note);
                    },
                    error: function (xhr, status, error) {
                    }
                });
            });
            $('.btnValidAssocCorrecteur').click(function(){
                var tr = $(this).closest('tr');
                var copieId = tr.attr('data-copieId');
                var span = tr.find('.copieAssocCorrecteur');
                var myBtn = $(this);
                var btnCancel = tr.find('.btnCancelAssocCorrecteur');

                $.ajax({
                    type: 'POST',
                    url: "{{ path('assocCorrecteurCopie_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        copieId: copieId
                    },
                    success: function (data) {
                        span.text('Le '+data['date']+' par '+ data['correcteur']);
                        span.removeClass('hidden');
                        btnCancel.removeClass('hidden');
                        myBtn.addClass('hidden');
                    },
                    error: function (xhr, status, error) {
                    }
                });
            });
            $('.btnCancelAssocCorrecteur').click(function(){
                var btnCancel = $(this);
                var tr = $(this).closest('tr');
                var copieId = tr.attr('data-copieId');
                var span = tr.find('.copieAssocCorrecteur');
                var myBtn = tr.find('.btnValidAssocCorrecteur');

                $.ajax({
                    type: 'POST',
                    url: "{{ path('desassocCorrecteurCopie_ajax') }}",
                    async: false,
                    dataType: "json",
                    data: {
                        copieId: copieId
                    },
                    success: function (data) {
                        span.text('');
                        span.addClass('hidden');
                        btnCancel.addClass('hidden');
                        myBtn.removeClass('hidden');
                    },
                    error: function (xhr, status, error) {
                    }
                });
            });
            $(".tableCopies").tablesorter({
                sortList: [[1,0]]
            });
        });
    </script>

    <div class="container mt-10" data-coursId="{{ cours.id }}" data-idDevoir="{{ devoir.id }}" data-folderUpload="{{ folderUpload }}" data-uploadSteps="{{ uploadSteps }}" data-uploadSrcSteps="{{ uploadSrcSteps }}">
        <div class="alert alert-info mb-10">
            <p>Vous pouvez déposer un corrigé pour chaque copie déposée.</p>
        </div>

        <div class="clearfix"></div>

        <div class="row bgcolor3 pb-20">
            <div class="col-sm-12">
                <figcaption>
                    <h4 class="img-title">Documents sujets <span class="color2">du devoir</span></h4>
                </figcaption>
            </div>
            <div class="col-sm-12 ml-20">
                {% for key,val in sujets %}
                    <a class="btn btn-sm btn-info mb-3" href="{{ val.url }}">{{ val.nom }}</a>
                {% endfor %}
            </div>
            <div class="col-sm-12">
                <figcaption>
                    <h4 class="img-title">Documents corrigés type <span class="color2">du devoir</span></h4>
                </figcaption>
            </div>
            <div class="col-sm-12 ml-20">
                {% for key,val in corrigesType %}
                    <a class="btn btn-sm btn-info mb-3" href="{{ val.url }}">{{ val.nom }}</a>
                {% endfor %}
            </div>
        </div>

        <div class="clearfix"></div>

        <div class="container mb-40">
            <div class="row">
                <div class="col-sm-12">
                    <table class="table table-striped tableCopies">
                        <thead>
                        <tr>
                            <th>ID</th>
                            <th>Étudiant</th>
                            <th>Copie</th>
                            <th>Téléchargée par le correcteur</th>
                            <th>Note</th>
                            <th>Corrigé</th>
                            <th>Nouvel upload</th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for key,val in devoirsEns %}
                            {% if val.copieFichier is not null or app.user.hasRole('ROLE_SUPER_ADMIN') %}

                                <tr data-userId="{{ val.copie.auteur.id }}" data-copieId="{{ val.copie.id }}">
                                    <th scope="row">{{ val.copie.auteur.id }}</th>
                                    <td>{{ val.copie.auteur.lastname }} {{ val.copie.auteur.firstname }}</td>
                                    <td>
                                        {% if val.copieFichier is not null %}
                                            {{ val.copie.dateCreation|localizeddate('none', 'none', null, null, 'd LLLL Y à H:mm' ) }}
                                            <a class="btn btn-warning btn-sm" target="_blank" href="{{ val.copieFichier.url }}"><i class="fa fa-external-link fa-2x"></i></a>
                                        {% else %}
                                            Pas de copie déposée
                                        {% endif %}
                                        {% if app.user.hasRole('ROLE_SUPER_ADMIN') %}
                                            <br />
                                            <div class="fileUploader col-sm-6 col-xs-12">
                                            <span class="btn btn-success fileinput-button">
                                                <i class="glyphicon glyphicon-plus"></i>
                                                <span>Déposer une copie</span>
                                                <input class="copieUpload" id="copieUpload_{{ val.copie.id }}" type="file" name="files[]" multiple>
                                            </span>

                                                <div id="itemProgressCop_{{ val.copie.id }}" class="progress col-xs-12">
                                                    <div class="progress-bar progress-bar-success"></div>
                                                </div>
                                            </div>
                                        {% endif %}
                                    </td>
                                    <td class="celluleAssocCorCopie">
                                        {% if not val.copie.assocCorrecteur %}
                                            <a class="btn btnValidAssocCorrecteur inversedBtn btn-success btn-sm" ><i class="fa fa-check fa-2x"></i></a>
                                            <span class="copieAssocCorrecteur hidden"></span>
                                            <div class="btnCancelAssocCorrecteur hidden">x</div>
                                        {% else %}
                                            <a class="btn btnValidAssocCorrecteur inversedBtn btn-success btn-sm hidden" ><i class="fa fa-check fa-2x"></i></a>
                                            <span class="copieAssocCorrecteur">Le {{ val.copie.assocCorrecteur.createdAt|localizeddate('none', 'none', 'fr', null, 'dd/MM/Y à H:mm' ) }} par {{ val.copie.assocCorrecteur.correcteur }}</span>
                                            {% if app.user.hasRole('ROLE_SUPER_ADMIN') or val.copie.assocCorrecteur.correcteur.id == app.user.id %}
                                                <div class="btnCancelAssocCorrecteur">x</div>
                                            {% endif %}
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if val.copie.note >= 0 %}
                                            <span class="copieNote">{{ val.copie.note }}</span>
                                            <input class="copieNoteEdit hidden" id="copieNoteEdit_{{ val.copie.id }}" type="text" value="{{ val.copie.note }}" />
                                            <a class="btn btnEditNote inversedBtn btn-success btn-sm" ><i class="fa fa-pencil fa-2x"></i></a>
                                            <a class="btn btnValidNote hidden inversedBtn btn-success btn-sm" ><i class="fa fa-check fa-2x"></i></a>
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if val.corrige != "undefined" %}
                                            {{ val.corrige.dateRendu|localizeddate('none', 'none', null, null, 'd LLLL Y à H:mm' ) }}
                                            <a class="btn btn-success btn-sm" target="_blank" href="{{ val.corrigeFichier.url }}"><i class="fa fa-external-link fa-2x"></i></a>
                                        {% endif %}
                                    </td>
                                    <td>
                                        <div class="fileUploader col-sm-6 col-xs-12">
                                            <span class="btn btn-success fileinput-button">
                                                <i class="glyphicon glyphicon-plus"></i>
                                                <span>Déposer un corrigé</span>
                                                <input class="corrigeUpload" id="corrigeUpload_{{ val.copie.id }}" type="file" name="files[]" multiple>
                                            </span>

                                            <div id="itemProgressCor_{{ val.copie.id }}" class="progress col-xs-12">
                                                <div class="progress-bar progress-bar-success"></div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            {% endif %}
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>

    <div class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

                <div class="modal-body" data-contentModal="devoirDisplay" data-idItem="" style="background:#aaa; background-size:cover">
                    <div class="row">
                        <div class="bginverse">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}